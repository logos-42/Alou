import { Tool, LanguageModelV1 } from 'ai';

type Context = {
    merchant_id?: string;
    sandbox?: boolean;
    access_token?: string;
    request_id?: string;
    tenant_context?: any;
    debug?: boolean;
    [key: string]: any;
};
type Configuration = {
    actions: {
        [product: string]: {
            [action: string]: boolean;
        };
    };
    context?: Context;
};

declare class PayPalClient {
    private _sdkClient;
    private _clientId;
    private _clientSecret;
    private _isSandbox;
    private _accessToken;
    private _baseUrl;
    private _context;
    constructor({ clientId, clientSecret, context }: {
        clientId: string;
        clientSecret: string;
        context: Context;
    });
    constructor({ context, accessToken }: {
        context: Context;
        accessToken?: string;
    });
    private createSDKClient;
    getAccessToken(): Promise<string>;
    getBaseUrl(): string;
    getHeaders(): Promise<Record<string, string>>;
    private generateUserAgent;
}

declare class PayPalAgentToolkit {
    readonly client: PayPalClient;
    private _paypal;
    private _tools;
    constructor({ clientId, clientSecret, configuration }: {
        clientId: string;
        clientSecret: string;
        configuration: Configuration;
    });
    getTools(): {
        [key: string]: Tool;
    };
}

declare class PayPalWorkflows {
    readonly toolkit: PayPalAgentToolkit;
    log?: (message: any) => void;
    constructor({ clientId, clientSecret, configuration, log }: {
        clientId: string;
        clientSecret: string;
        configuration: Configuration;
        log?: (message: any) => void;
    });
    generateOrder(llm: LanguageModelV1, userPrompt: string, systemPrompt: string): Promise<string>;
    getDisputeDetails(llm: LanguageModelV1, userPrompt: string): Promise<string>;
}

declare const ALL_TOOLS_ENABLED: {
    [key: string]: {
        [key: string]: boolean;
    };
};

export { ALL_TOOLS_ENABLED, PayPalAgentToolkit, PayPalWorkflows };
