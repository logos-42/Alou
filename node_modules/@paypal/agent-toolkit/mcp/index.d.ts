import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { z } from 'zod';

type Context = {
    merchant_id?: string;
    sandbox?: boolean;
    access_token?: string;
    request_id?: string;
    tenant_context?: any;
    debug?: boolean;
    [key: string]: any;
};
type Configuration = {
    actions: {
        [product: string]: {
            [action: string]: boolean;
        };
    };
    context?: Context;
};

declare class PayPalAgentToolkit extends McpServer {
    private _paypal;
    constructor({ accessToken, configuration, }: {
        accessToken: string;
        configuration: Configuration;
    });
}

declare class PayPalClient {
    private _sdkClient;
    private _clientId;
    private _clientSecret;
    private _isSandbox;
    private _accessToken;
    private _baseUrl;
    private _context;
    constructor({ clientId, clientSecret, context }: {
        clientId: string;
        clientSecret: string;
        context: Context;
    });
    constructor({ context, accessToken }: {
        context: Context;
        accessToken?: string;
    });
    private createSDKClient;
    getAccessToken(): Promise<string>;
    getBaseUrl(): string;
    getHeaders(): Promise<Record<string, string>>;
    private generateUserAgent;
}

declare class PayPalAPI {
    paypalClient: PayPalClient;
    context: Context;
    baseUrl: string;
    accessToken?: string;
    constructor(paypalClientOrAccessToken: PayPalClient | string, context?: Context);
    run(method: string, arg: any): Promise<string>;
    private executeMethod;
}

type Tool = {
    method: string;
    name: string;
    description: string;
    parameters: z.ZodObject<any, any, any, any>;
    actions: {
        [key: string]: {
            [action: string]: boolean;
        };
    };
};

declare class PayPalMCPToolkit {
    private _paypal;
    private readonly filteredTools;
    constructor({ accessToken, configuration, }: {
        accessToken: string;
        configuration: Configuration;
    });
    getTools(): Tool[];
    getPaypalAPIService(): PayPalAPI;
}

export { PayPalAPI, PayPalAgentToolkit, PayPalMCPToolkit, type Tool };
