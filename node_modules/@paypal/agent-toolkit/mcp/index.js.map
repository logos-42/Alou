{"version":3,"sources":["../src/modelcontextprotocol/index.ts","../src/modelcontextprotocol/toolkit.ts","../src/shared/configuration.ts","../src/shared/functions.ts","../src/shared/payloadUtils.ts","../src/shared/constants.ts","../src/shared/client.ts","../package.json","../src/shared/api.ts","../src/shared/prompts.ts","../src/shared/parameters.ts","../src/shared/tools.ts","../src/modelcontextprotocol/mcpToolkit.ts"],"sourcesContent":["import PayPalAgentToolkit from './toolkit';\nimport  PayPalMCPToolkit from './mcpToolkit';\nimport PayPalAPI from '../shared/api';\nimport {Tool} from '../shared/tools';\n\nexport {\n  PayPalAgentToolkit,\n  PayPalMCPToolkit,\n  PayPalAPI,\n  Tool\n};\n","import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { RequestHandlerExtra } from '@modelcontextprotocol/sdk/shared/protocol.js';\nimport { Configuration, isToolAllowed } from '../shared/configuration';\nimport PayPalAPI from '../shared/api';\nimport tools from '../shared/tools';\nimport { version } from '../../package.json';\n\n\nconst SOURCE = 'MCP';\n\nclass PayPalAgentToolkit extends McpServer {\n  private _paypal: PayPalAPI;\n\n  constructor({\n    accessToken,\n    configuration,\n  }: {\n    accessToken: string;\n    configuration: Configuration;\n  }) {\n    super({\n      name: 'PayPal',\n      version: version,\n    });\n\n    this._paypal = new PayPalAPI(accessToken, { ...configuration.context, source: SOURCE });\n\n    const context = configuration.context || {};\n    const filteredTools = tools(context).filter((tool) =>\n      isToolAllowed(tool, configuration)\n    );\n\n    filteredTools.forEach((tool) => {\n      const regTool = this.tool(\n        tool.method,\n        tool.description,\n        tool.parameters.shape,\n        async (arg: any, _extra: RequestHandlerExtra<any, any>) => {\n          const result = await this._paypal.run(tool.method, arg);\n          return {\n            content: [\n              {\n                type: 'text' as const,\n                text: String(result),\n              },\n            ],\n          };\n        }\n      );\n    });\n  }\n}\n\nexport default PayPalAgentToolkit;\n","export type Context = {\n  merchant_id?: string;\n  sandbox?: boolean;\n  access_token?: string;\n  request_id?: string;\n  tenant_context?: any;\n  debug?: boolean;\n  [key: string]: any;\n};\n\nexport type Configuration = {\n  actions: {\n    [product: string]: {\n      [action: string]: boolean;\n    };\n  };\n  context?: Context;\n};\n\nexport function isToolAllowed(\n  tool: { actions: { [key: string]: { [action: string]: boolean } } },\n  configuration: Configuration\n): boolean {\n  for (const product in tool.actions) {\n    for (const action in tool.actions[product]) {\n      if (\n        configuration.actions[product] &&\n        configuration.actions[product][action]\n      ) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n","import axios from 'axios';\nimport type { Context } from './configuration';\nimport {\n  getInvoicParameters,\n  cancelSentInvoiceParameters,\n  createInvoiceParameters,\n  createOrderParameters,\n  generateInvoiceQrCodeParameters,\n  getOrderParameters,\n  listInvoicesParameters,\n  sendInvoiceParameters,\n  sendInvoiceReminderParameters,\n  createShipmentParameters,\n  getShipmentTrackingParameters,\n  getDisputeParameters,\n  listDisputesParameters,\n  captureOrderParameters,\n  acceptDisputeClaimParameters,\n  listTransactionsParameters,\n  createProductParameters,\n  listProductsParameters,\n  showProductDetailsParameters,\n  createSubscriptionPlanParameters,\n  listSubscriptionPlansParameters,\n  showSubscriptionPlanDetailsParameters,\n  createSubscriptionParameters,\n  showSubscriptionDetailsParameters,\n  cancelSubscriptionParameters,\n  getRefundParameters,\n  createRefundParameters,\n  updateSubscriptionParameters\n} from \"./parameters\";\nimport {parseOrderDetails, parseUpdateSubscriptionPayload, toQueryString} from \"./payloadUtils\";\nimport { TypeOf } from \"zod\";\nimport debug from \"debug\";\nimport PayPalClient from './client';\n\nconst logger = debug('agent-toolkit:functions');\n\n// === INVOICE FUNCTIONS ===\n\nexport async function createInvoice(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof createInvoiceParameters>>\n) {\n  logger('[createInvoice] Starting invoice creation process');\n  \n  const headers = await client.getHeaders();\n  logger('[createInvoice] Headers obtained');\n\n  const url = `${client.getBaseUrl()}/v2/invoicing/invoices`;\n  logger(`[createInvoice] API URL: ${url}`);\n\n  // Make API call\n  try {\n    logger('[createInvoice] Sending request to PayPal API');\n    const response = await axios.post(url, params, { headers });\n    logger(`[createInvoice] Invoice created successfully. Status: ${response.status}`);\n\n    // Check if response matches the expected format for a successful invoice creation\n    if (response.data && response.data.rel === 'self' &&\n      response.data.href && response.data.href.includes('/v2/invoicing/invoices/') &&\n      response.data.method === 'GET') {\n\n      // Extract invoice ID from the href URL\n      const hrefParts = response.data.href.split('/');\n      const invoiceId = hrefParts[hrefParts.length - 1];\n\n      // Automatically send the invoice with specific parameters\n      logger('[createInvoice] Automatically sending invoice with thank you note');\n      try {\n        const sendResult = await sendInvoice(client, context, {\n          invoice_id: invoiceId,\n          note: \"thank you for choosing us. If there are any issues, feel free to contact us\",\n          send_to_recipient: true\n        });\n\n        // Return both the create and send results\n        return {\n          createResult: response.data,\n          sendResult: sendResult\n        };\n      } catch (sendError: any) {\n        logger('[createInvoice] Error in auto-send invoice:', sendError.message);\n        // Still return the original creation result even if sending fails\n        return response.data;\n      }\n    } else {\n      logger(`[createInvoice] Invoice ID: ${response.data.id || 'N/A'}`);\n      return response.data;\n    }\n  } catch (error: any) {\n    logger('[createInvoice] Error creating invoice:', error.message);\n    handleAxiosError(error);\n  }\n}\n\nexport async function listInvoices(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof listInvoicesParameters>>\n) {\n  logger('[listInvoices] Starting to list invoices');\n\n  const headers = await client.getHeaders();\n  logger('[listInvoices] Headers obtained');\n\n  const url = `${client.getBaseUrl()}/v2/invoicing/invoices`;\n  logger(`[listInvoices] API URL: ${url}`);\n\n  // Make API call\n  try {\n    logger('[listInvoices] Sending request to PayPal API');\n    const response = await axios.get(url, { headers, params });\n    logger(`[listInvoices] Invoices retrieved successfully. Status: ${response.status}`);\n\n    return response.data;\n  } catch (error: any) {\n    logger('[listInvoices] Error listing invoices:', error.message);\n    handleAxiosError(error);\n  }\n}\n\nexport async function getInvoice(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof getInvoicParameters>>\n) {\n  logger('[getInvoice] Starting to get invoice');\n\n  const headers = await client.getHeaders();\n  logger('[getInvoice] Headers obtained');\n\n  const url = `${client.getBaseUrl()}/v2/invoicing/invoices/${params.invoice_id}`;\n\n  // Make API call\n  try {\n    logger('[getInvoice] Sending request to PayPal API');\n    const response = await axios.get(url, { headers });\n    logger(`[getInvoice] Invoice retrieved successfully. Status: ${response.status}`);\n    return response.data;\n  } catch (error: any) {\n    logger('[getInvoice] Error getting invoice:', error.message);\n    handleAxiosError(error);\n  }\n}\n\nexport async function sendInvoice(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof sendInvoiceParameters>>\n) {\n  logger('[sendInvoice] Starting to send invoice');\n  logger(`[sendInvoice] Context: ${JSON.stringify({ sandbox: context.sandbox, merchant_id: context.merchant_id })}`);\n\n  const {\n    invoice_id,\n    note,\n    send_to_recipient,\n    additional_recipients,\n  } = params;\n\n  const headers = await client.getHeaders();\n  logger('[sendInvoice] Headers obtained');\n\n  const url = `${client.getBaseUrl()}/v2/invoicing/invoices/${invoice_id}/send`;\n  logger(`[sendInvoice] API URL: ${url}`);\n\n  // Make API call\n  try {\n    logger('[sendInvoice] Sending request to PayPal API');\n    const response = await axios.post(url, params, { headers });\n    logger(`[sendInvoice] Invoice sent successfully. Status: ${response.status}`);\n    return response.data;\n  } catch (error: any) {\n    logger('[sendInvoice] Error sending invoice:', error.message);\n    handleAxiosError(error);\n  }\n}\n\nexport async function sendInvoiceReminder(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof sendInvoiceReminderParameters>>,\n) {\n  logger('[sendInvoiceReminder] Starting to send invoice reminder');\n  const {\n    invoice_id,\n    note,\n    subject,\n    additional_recipients,\n  } = params;\n\n  const headers = await client.getHeaders();\n  logger('[sendInvoiceReminder] Headers obtained');\n\n  const url = `${client.getBaseUrl()}/v2/invoicing/invoices/${invoice_id}/remind`;\n\n  // Make API call\n  try {\n    logger('[sendInvoiceReminder] Sending request to PayPal API');\n    const response = await axios.post(url, params, { headers });\n    logger(`[sendInvoiceReminder] Invoice reminder sent successfully. Status: ${response.status}`);\n    return response.data;\n  } catch (error: any) {\n    logger('[sendInvoiceReminder] Error sending invoice reminder:', error.message);\n    handleAxiosError(error);\n  }\n}\n\nexport async function cancelSentInvoice(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof cancelSentInvoiceParameters>>\n) {\n  logger('[cancelSentInvoice] Starting to cancel sent invoice');\n  \n  const {\n    invoice_id,\n    note,\n    send_to_recipient,\n    additional_recipients,\n  } = params;\n\n  const headers = await client.getHeaders();\n  logger('[cancelSentInvoice] Headers obtained');\n\n  const url = `${client.getBaseUrl()}/v2/invoicing/invoices/${invoice_id}/cancel`;\n\n  // Make API call\n  try {\n    logger('[cancelSentInvoice] Sending request to PayPal API');\n    const response = await axios.post(url, params, { headers });\n    if (response.status === 204) {\n      logger(`[cancelSentInvoice] Invoice cancelled successfully. Status: ${response.status}`);\n      return { success: true, invoice_id };\n    }\n    logger(`[cancelSentInvoice] Invoice cancellation response received. Status: ${response.status}`);\n    return response.data;\n  } catch (error: any) {\n    logger('[cancelSentInvoice] Error cancelling invoice:', error.message);\n    handleAxiosError(error);\n  }\n}\n\nexport async function generateInvoiceQrCode(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof generateInvoiceQrCodeParameters>>\n) {\n  const { invoice_id } = params;\n  const requestBody = {\n    width: params.width,\n    height: params.height\n  };\n  const url = `${client.getBaseUrl()}/v2/invoicing/invoices/${invoice_id}/generate-qr-code`;\n  // Make API call\n  const headers = await client.getHeaders();\n  logger('[generateInvoiceQrCodePrompt] Headers obtained');\n  try {\n    logger('[cancelSentInvoice] Sending request to PayPal API');\n    const response = await axios.post(url, requestBody, { headers });\n    if (response.status === 204) {\n      logger(`[cancelSentInvoice] Invoice cancelled successfully. Status: ${response.status}`);\n      return { success: true, invoice_id };\n    }\n    logger(`[cancelSentInvoice] Invoice cancellation response received. Status: ${response.status}`);\n    return response.data;\n  } catch (error: any) {\n    logger('[cancelSentInvoice] Error cancelling invoice:', error.message);\n    handleAxiosError(error);\n  }\n}\n\n// === PRODUCT FUNCTIONS ===\nexport async function createProduct(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof createProductParameters>>) {\n\n  const headers = await client.getHeaders();\n  const apiUrl = `${client.getBaseUrl()}/v1/catalogs/products`;\n  logger(`[createProduct] Payload: ${JSON.stringify(params, null, 2)}`);\n  try {\n    const response = await axios.post(apiUrl, params, { headers });\n    return response.data;\n  } catch (error) {\n    // @ts-ignore\n    console.error(\"Error Creating Product:\", error.response?.data || error);\n    throw error;\n  }\n}\n\n\nexport async function listProducts(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof listProductsParameters>>) {\n\n  const headers = await client.getHeaders();\n  const { page = 1, page_size = 2, total_required = true } = params;\n  const apiUrl = `${client.getBaseUrl()}/v1/catalogs/products?page_size=${page_size}&page=${page}&total_required=${total_required}`;\n\n  try {\n    const response = await axios.get(apiUrl, { headers });\n    return response.data;\n  } catch (error) {\n    // @ts-ignore\n    console.error(\"Error Listing Product:\", error.response?.data || error);\n    throw error;\n  }\n};\n\nexport async function showProductDetails(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof showProductDetailsParameters>>) {\n\n  const headers = await client.getHeaders();\n  const apiUrl = `${client.getBaseUrl()}/v1/catalogs/products/${params.product_id}`;\n  try {\n    const response = await axios.get(apiUrl, {\n      headers: headers,\n    });\n\n\n    return response.data;\n  } catch (error) {\n    // @ts-ignore\n    console.error(\"Error Show Product Details:\", error.response?.data || error);\n    throw error;\n  }\n};\n\n\n\n// === SUBSCRIPTION PLAN FUNCTIONS ===\nexport async function createSubscriptionPlan(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof createSubscriptionPlanParameters>>) {\n\n  const headers = await client.getHeaders();\n  const apiUrl = `${client.getBaseUrl()}/v1/billing/plans`;\n  logger(`[createSubscriptionPlan] Payload: ${JSON.stringify(params, null, 2)}`);\n  try {\n    const response = await axios.post(apiUrl, params, { headers });\n    return response.data;\n  } catch (error) {\n    // @ts-ignore\n    console.error(\"Error Creating Plan:\", error.response?.data || error);\n    throw error;\n  }\n}\n\nexport async function listSubscriptionPlans(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof listSubscriptionPlansParameters>>) {\n  const { page = 1, page_size = 10, total_required = true, product_id } = params;\n  let apiUrl = `${client.getBaseUrl()}/v1/billing/plans?page_size=${page_size}&page=${page}&total_required=${total_required}`;\n  if (product_id) {\n    apiUrl += `&product_id=${product_id}`;\n  }\n  const headers = await client.getHeaders();\n  try {\n    const response = await axios.get(apiUrl, {\n      headers: headers,\n    });\n    return response.data;\n  } catch (error) {\n    // @ts-ignore\n    console.error(\"Error Creating Plan:\", error.response?.data || error);\n    throw error;\n  }\n}\n\nexport async function showSubscriptionPlanDetails(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof showSubscriptionPlanDetailsParameters>>) {\n\n  const headers = await client.getHeaders();\n  const apiUrl = `${client.getBaseUrl()}/v1/billing/plans/${params.plan_id}`;\n  try {\n    const response = await axios.get(apiUrl, {\n      headers: headers,\n    });\n\n    return response.data;\n  } catch (error) {\n    // @ts-ignore\n    console.error(\"Error Show Plan Details:\", error.response?.data || error);\n    throw error;\n  }\n}\n\n\n// === SUBSCRIPTION  FUNCTIONS ===\nexport async function createSubscription(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof createSubscriptionParameters>>) {\n\n  const headers = await client.getHeaders();\n  const apiUrl = `${client.getBaseUrl()}/v1/billing/subscriptions`;\n\n  logger(`[createSubscription] Payload: ${JSON.stringify(params, null, 2)}`);\n  try {\n    const response = await axios.post(apiUrl, params, { headers });\n    return response.data;\n  } catch (error) {\n    // @ts-ignore\n    console.error(\"Error Creating Subscription:\", error.response?.data || error);\n    throw error;\n  }\n}\n\n\nexport async function showSubscriptionDetails(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof showSubscriptionDetailsParameters>>) {\n\n  const headers = await client.getHeaders();\n  const { subscription_id, get_additional_details } = params;\n  const apiUrl = `${client.getBaseUrl()}/v1/billing/subscriptions/${subscription_id}${get_additional_details? \"?fields=plan\" : \"\"}`;\n\n  try {\n    const response = await axios.get(apiUrl, {\n      headers: headers,\n    });\n\n    return response.data;\n  } catch (error) {\n    // @ts-ignore\n    console.error(\"Error Show Subscription Details:\", error.response?.data || error);\n    throw error;\n  }\n}\n\n\nexport async function cancelSubscription(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof cancelSubscriptionParameters>>) {\n\n  const headers = await client.getHeaders();\n  const { subscription_id, payload } = params;\n  const apiUrl = `${client.getBaseUrl()}/v1/billing/subscriptions/${subscription_id}/cancel`;\n\n  try {\n    const response = await axios.post(apiUrl, payload, { headers });\n    return response.data;\n  } catch (error) {\n    // @ts-ignore\n    console.error(\"Error Creating Subscription:\", error.response?.data || error);\n    throw error;\n  }\n}\n\nexport async function updateSubscription(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof updateSubscriptionParameters>>){\n\n  const headers = await client.getHeaders();\n  const { subscription_id } = params;\n  try {\n    const subscriptionDetails = await showSubscriptionDetails(client, context, { subscription_id, get_additional_details: true});\n    const operations = parseUpdateSubscriptionPayload(params, subscriptionDetails);\n    const apiUrl = `${client.getBaseUrl()}/v1/billing/subscriptions/${subscription_id}`;\n    const response = await axios.patch(apiUrl, operations, { headers });\n    return response.data;\n  } catch(error: any){\n    logger('[updateSubscription] Error updating subscription:', JSON.stringify(error.message));\n    handleAxiosError(error);\n  }\n}\n\n\n// === ORDER FUNCTIONS ===\n\nexport const createOrder = async (\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof createOrderParameters>>\n): Promise<any> => {\n  logger('[createOrder] Starting order creation process');\n  const headers = await client.getHeaders();\n  const url = `${client.getBaseUrl()}/v2/checkout/orders`;\n  const orderRequest = parseOrderDetails(params);\n  try {\n    const response = await axios.post(url, orderRequest, { headers });\n    logger(`[createOrder] Order created successfully. Status: ${response.status}`);\n    return response.data;\n  } catch (error: any) {\n    logger('[createOrder] Error creating order:', error.message);\n    handleAxiosError(error);\n  }\n};\n\nexport const getOrder = async (\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof getOrderParameters>>\n): Promise<any> => {\n  logger('[getOrder] Starting order retrieval process');\n  logger(`[getOrder] Context: ${JSON.stringify({ sandbox: context.sandbox, merchant_id: context.merchant_id })}`);\n  logger(`[getOrder] Order ID: ${params.id}`);\n\n  const headers = await client.getHeaders();\n  logger('[getOrder] Headers obtained');\n\n  const url = `${client.getBaseUrl()}/v2/checkout/orders/${params.id}`;\n\n\n  try {\n    logger('[getOrder] Sending GET request to PayPal API');\n    const response = await axios.get(url, { headers });\n    logger(`[getOrder] Order retrieved successfully. Status: ${response.status}`);\n    return response.data;\n  } catch (error: any) {\n    logger('[getOrder] Error retrieving order:', error.message);\n    handleAxiosError(error);\n  }\n};\n\nexport const captureOrder = async (\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof captureOrderParameters>>\n) => {\n  try {\n    logger(`[captureOrder] Starting order capture process with params: ${JSON.stringify(params)}`);\n    const url = `${client.getBaseUrl()}/v2/checkout/orders/${params.id}/capture`;\n    const response = await axios.post(url, {}, {\n      headers: await client.getHeaders()\n    });\n    logger(`[captureOrder] Response %s`, response);\n    if (response.status <= 299) {\n      return {\n        status: \"success\",\n        response: response.data\n      };\n    } else {\n      return {\n        status: \"error\",\n        response: response.data\n      };\n    }\n  } catch (error) {\n    console.error(error);\n    throw new Error('Failed to capture order');\n  }\n}\n\n// === TRACKING FUNCTIONS ===\n\nexport async function createShipment(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof createShipmentParameters>>\n) {\n  logger('[createShipment] Starting shipment tracking creation process');\n  const {\n    tracking_number,\n    transaction_id,\n    status,\n    carrier\n  } = params;\n  \n  const headers = await client.getHeaders();\n  logger('[createShipment] Headers obtained');\n\n  const url = `${client.getBaseUrl()}/v1/shipping/trackers-batch`;\n  logger(`[createShipment] API URL: ${url}`);\n\n  // Prepare trackers data - wrapping single shipment in an array\n  const trackersData = {\n    trackers: [{\n      tracking_number,\n      transaction_id,\n      status,\n      carrier\n    }]\n  };\n\n\n  // Make API call\n  try {\n    logger('[createShipment] Sending request to PayPal API');\n    const response = await axios.post(url, trackersData, { headers });\n    logger(`[createShipment] Shipment tracking created successfully. Status: ${response.status}`);\n    return response.data;\n  } catch (error: any) {\n    logger('[createShipment] Error creating shipment tracking:', error.message);\n    handleAxiosError(error);\n  }\n}\n\nexport async function getShipmentTracking(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof getShipmentTrackingParameters>>\n) {\n  logger('[getShipmentTracking] Starting to get shipment tracking information');\n  const {\n    transaction_id: providedTransactionId,\n    order_id\n  } = params;\n \n  const headers = await client.getHeaders();\n  logger('[getShipmentTracking] Headers obtained');\n\n  let transaction_id = providedTransactionId;\n\n  // Check if order_id is provided and transaction_id is not.\n  if (order_id && !providedTransactionId) {\n    logger('[getShipmentTracking] order_id provided but transaction_id is missing. Attempting to extract transaction_id from order details.');\n    try {\n      const orderDetails = await getOrder(client, context, { id: order_id });\n\n      if (orderDetails && orderDetails.purchase_units && orderDetails.purchase_units.length > 0) {\n        const purchaseUnit = orderDetails.purchase_units[0];\n\n        if (purchaseUnit.payments && purchaseUnit.payments.captures && purchaseUnit.payments.captures.length > 0) {\n          const captureDetails = purchaseUnit.payments.captures[0];\n          transaction_id = captureDetails.id;\n\n        } else {\n          throw new Error(\"Could not find capture id in the purchase unit details.\")\n        }\n      }\n\n      else {\n        throw new Error(\"Could not find purchase unit details in order details.\")\n      }\n\n    } catch (error: any) {\n      logger(`[getShipmentTracking] Error extracting transaction_id from order details: ${error.message}`);\n      throw new Error(`Error extracting transaction_id from order details: ${error.message}`);\n    }\n  } else if (!providedTransactionId) {\n    throw new Error(\"Either transaction_id or order_id must be provided.\");\n  }\n\n\n  const url = `${client.getBaseUrl()}/v1/shipping/trackers?transaction_id=${transaction_id}`;\n  logger(`[getShipmentTracking] API URL: ${url}`);\n\n  // Make API call\n  try {\n    logger('[getShipmentTracking] Sending request to PayPal API');\n    const response = await axios.get(url, { headers });\n    logger(`[getShipmentTracking] Shipment tracking retrieved successfully. Status: ${response.status}`);\n    return response.data;\n  } catch (error: any) {\n    logger('[getShipmentTracking] Error retrieving shipment tracking:', error.message);\n    handleAxiosError(error);\n  }\n}\n\n// === DISPUTE FUNCTIONS ===\n\nexport async function listDisputes(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof listDisputesParameters>>\n): Promise<any> {\n  logger('[listDisputes] Starting to list disputes');\n\n  const headers = await client.getHeaders();\n  logger('[listDisputes] Headers obtained');\n\n  const url = `${client.getBaseUrl()}/v1/customer/disputes?${toQueryString(params)}`;\n\n  try {\n    logger('[listDisputes] Sending request to PayPal API');\n    const response = await axios.get(url, { headers, params });\n    logger(`[listDisputes] Disputes retrieved successfully. Status: ${response.status}`);\n    return response.data;\n  } catch (error: any) {\n    logger('[listDisputes] Error listing disputes:', error.message);\n    handleAxiosError(error);\n  }\n}\n\nexport async function getDispute(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof getDisputeParameters>>\n): Promise<any> {\n\n  const { dispute_id } = params\n\n  const headers = await client.getHeaders();\n  logger('[getDispute] Headers obtained');\n\n  const url = `${client.getBaseUrl()}/v1/customer/disputes/${dispute_id}`;\n  logger(`[getDispute] API URL: ${url}`);\n\n  try {\n    logger('[getDispute] Sending request to PayPal API');\n    const response = await axios.get(url, { headers });\n    logger(`[getDispute] Dispute details retrieved successfully. Status: ${response.status}`);\n    return response.data;\n  } catch (error: any) {\n    logger(`[getDispute] Error retrieving dispute details for ID: ${dispute_id}:`, error.message);\n    handleAxiosError(error);\n  }\n}\n\nexport async function acceptDisputeClaim(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof acceptDisputeClaimParameters>>\n): Promise<any> {\n  logger('[acceptClaim] Starting to list disputes');\n\n  const headers = await client.getHeaders();\n  logger('[acceptClaim] Headers obtained');\n\n  const url = `${client.getBaseUrl()}/v1/customer/disputes/${params.dispute_id}/accept-claim`;\n  logger(`[acceptClaim] API URL: ${url}`);\n\n  try {\n    logger('[acceptClaim] Sending request to PayPal API');\n    const response = await axios.post(url, { note: params.note }, { headers, params });\n    logger(`[acceptClaim] Disputes retrieved successfully. Status: ${response.status}`);\n    return response.data;\n  } catch (error: any) {\n    logger('[acceptClaim] Error listing disputes:', error.message);\n    handleAxiosError(error);\n  }\n}\n\nexport async function listTransactions(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof listTransactionsParameters>>\n): Promise<any> {\n  \n  const headers = await client.getHeaders();\n  logger('[listTransactions] Headers obtained');\n\n  // If we're looking for a specific transaction by ID\n  if (params.transaction_id) {\n    logger(`[listTransactions] Searching for transaction with ID: ${params.transaction_id}`);\n    \n    // Set maximum number of months to search back\n    const searchMonths = params.search_months || 12;\n    logger(`[listTransactions] Will search up to ${searchMonths} months back for the transaction`);\n    \n    // Start searching from current date\n    const endDate = new Date();\n    let startDate = new Date();\n    startDate.setDate(endDate.getDate() - 31); // Start with the past 31 days\n    \n    // For each month, query the transactions until we find the one we're looking for\n    for (let month = 0; month < searchMonths; month++) {\n      const queryParams = { ...params };\n      // Delete search_months parameter before sending to the API\n      // @ts-expect-error\n      delete queryParams.search_months;\n      queryParams.end_date = endDate.toISOString();\n      queryParams.start_date = startDate.toISOString();\n      \n      logger(`[listTransactions] Searching month ${month + 1}: ${startDate.toISOString()} to ${endDate.toISOString()}`);\n      \n      // Construct URL for API call\n      const url = `${client.getBaseUrl()}/v1/reporting/transactions?${toQueryString(queryParams)}`;\n      logger(`[listTransactions] API URL: ${url}`);\n      \n      try {\n        logger('[listTransactions] Sending request to PayPal API');\n        const response = await axios.get(url, { headers, params: queryParams });\n        logger(`[listTransactions] Transactions retrieved successfully. Status: ${response.status}`);\n        \n        // Check if our transaction is in the results\n        if (response.data && response.data.transaction_details && response.data.transaction_details.length > 0) {\n          const foundTransaction = response.data.transaction_details.find(\n            (transaction: any) => transaction.transaction_info.transaction_id === params.transaction_id\n          );\n          \n          if (foundTransaction) {\n            logger(`[listTransactions] Found transaction with ID: ${params.transaction_id}`);\n            return {\n              found: true,\n              transaction_details: [foundTransaction],\n              total_items: 1\n            };\n          }\n        }\n        \n        // Move back one month for the next search\n        endDate.setTime(startDate.getTime());\n        startDate.setMonth(startDate.getMonth() - 1);\n        \n      } catch (error: any) {\n        logger(`[listTransactions] Error searching transactions for month ${month + 1}:`, error.message);\n        // Continue to next month instead of failing completely\n      }\n    }\n    \n    // If we've gone through all months and haven't found the transaction\n    logger(`[listTransactions] Transaction with ID ${params.transaction_id} not found after searching ${searchMonths} months`);\n    return {\n      found: false,\n      transaction_details: [],\n      total_items: 0,\n      message: `The transaction ID ${params.transaction_id} was not found in the last ${searchMonths} months. Please verify the transaction ID and try again, or let me know if there's anything else I can assist you with!`\n    };\n  } else {\n    // Original behavior for listing transactions without a specific ID\n    const queryParams = { ...params };\n    // Delete search_months parameter before sending to the API\n    // @ts-expect-error\n    delete queryParams.search_months;\n    \n    if (!queryParams.end_date && !queryParams.start_date) {\n      queryParams.end_date = new Date().toISOString();\n      queryParams.start_date = new Date(new Date().getTime() - (31 * 24 * 60 * 60 * 1000)).toISOString();\n    } else if (!queryParams.end_date) {\n      const startDate = new Date(queryParams.start_date as string);\n      queryParams.end_date = new Date(startDate.getTime() + (31 * 24 * 60 * 60 * 1000)).toISOString();\n    } else if (!queryParams.start_date) {\n      const endDate = new Date(queryParams.end_date as string);\n      queryParams.start_date = new Date(endDate.getTime() - (31 * 24 * 60 * 60 * 1000)).toISOString();\n    } else {\n      const startDate = new Date(queryParams.start_date as string);\n      const endDate = new Date(queryParams.end_date as string);\n      const dayRange = (endDate.getTime() - startDate.getTime()) / (24 * 60 * 60 * 1000);\n      \n      if (dayRange > 31) {\n        // Reset start_date time if range > 31\n        queryParams.start_date = new Date(endDate.getTime() - (31 * 24 * 60 * 60 * 1000)).toISOString();\n      }\n    }\n\n    const url = `${client.getBaseUrl()}/v1/reporting/transactions?${toQueryString(queryParams)}`;\n    logger(`[listTransactions] API URL: ${url}`);\n\n    try {\n      logger('[listTransactions] Sending request to PayPal API');\n      const response = await axios.get(url, { headers, params: queryParams });\n      logger(`[listTransactions] Transactions retrieved successfully. Status: ${response.status}`);\n      return response.data;\n    } catch (error: any) {\n      logger('[listTransactions] Error listing transactions:', error.message);\n      handleAxiosError(error);\n    }\n  }\n}\n\n\n  export async function createRefund(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof createRefundParameters>>\n): Promise<any> {\n  logger(`[createRefund] Starting to refund capture for ID: ${params.capture_id}`);\n\n  const { capture_id } = params;\n\n  const headers = await client.getHeaders();\n  logger('[createRefund] Headers obtained');\n\n  const url = `${client.getBaseUrl()}/v2/payments/captures/${capture_id}/refund`;\n  logger(`[createRefund] API URL: ${url}`);\n\n  try {\n    logger('[createRefund] Sending request to PayPal API');\n    const response = await axios.post(url, params, { headers });\n    logger(`[createRefund] Capture refunded successfully. Status: ${response.status}`);\n    return response.data;\n  } catch (error: any) {\n    logger(`[createRefund] Error refunding capture for ID: ${capture_id}:`, error.message);\n    handleAxiosError(error);\n  }\n}\n\nexport async function getRefund(\n  client: PayPalClient,\n  context: Context,\n  params: TypeOf<ReturnType<typeof getRefundParameters>>\n): Promise<any> {\n  logger(`[getRefund] Starting to get refund details for ID: ${params.refund_id}`);\n\n  const { refund_id } = params;\n\n  const headers = await client.getHeaders();\n  logger('[getRefund] Headers obtained');\n\n  const url = `${client.getBaseUrl()}/v2/payments/refunds/${refund_id}`;\n  logger(`[getRefund] API URL: ${url}`);\n\n  try {\n    logger('[getRefund] Sending request to PayPal API');\n    const response = await axios.get(url, { headers });\n    logger(`[getRefund] Refund details retrieved successfully. Status: ${response.status}`);\n    return response.data;\n  } catch (error: any) {\n    logger(`[getRefund] Error retrieving refund details for ID: ${refund_id}:`, error.message);\n    handleAxiosError(error);\n  }\n}\n\n// Helper function to handle Axios errors\nfunction handleAxiosError(error: any): never {\n  logger('[handleAxiosError] Processing error from PayPal API');\n\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    // that falls out of the range of 2xx\n    logger(`[handleAxiosError] Response error status: ${error.response.status}`);\n    logger(`[handleAxiosError] Response error headers: ${JSON.stringify(error.response.headers)}`);\n\n    try {\n      const errorData = error.response.data;\n      logger(`[handleAxiosError] Error data: ${JSON.stringify(errorData)}`);\n\n      let errorMessage = errorData.message || 'Unknown error';\n\n      if (errorData.details && Array.isArray(errorData.details)) {\n        const detailDescriptions = errorData.details\n          .map((detail: any) => detail.description || '')\n          .filter(Boolean)\n          .join('; ');\n\n        if (detailDescriptions) {\n          errorMessage += ': ' + detailDescriptions;\n          logger(`[handleAxiosError] Error details: ${detailDescriptions}`);\n        }\n      }\n\n      logger(`[handleAxiosError] Throwing error with message: PayPal API error (${error.response.status}): ${errorMessage}`);\n      throw new Error(`PayPal API error (${error.response.status}): ${errorMessage}`);\n    } catch (e) {\n      // In case of parsing issues, throw a more generic error\n      logger('[handleAxiosError] Error parsing response data, using raw data');\n      logger(`[handleAxiosError] Throwing error with message: PayPal API error (${error.response.status}): ${error.response.data}`);\n      throw new Error(`PayPal API error (${error.response.status}): ${error.response.data}`);\n    }\n  } else if (error.request) {\n    // The request was made but no response was received\n    logger('[handleAxiosError] No response received from PayPal API');\n    logger(`[handleAxiosError] Request: ${JSON.stringify(error.request)}`);\n    logger(`[handleAxiosError] Throwing error with message: PayPal API error: No response received - ${error.message}`);\n    throw new Error(`PayPal API error: No response received - ${error.message}`);\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    logger(`[handleAxiosError] Error setting up request: ${error.message}`);\n    logger(`[handleAxiosError] Throwing error with message: PayPal API error: ${error.message}`);\n    throw new Error(`PayPal API error: ${error.message}`);\n  }\n}\n\n\n","import {TypeOf, z} from \"zod\";\nimport {createOrderParameters, updateSubscriptionParameters} from \"./parameters\";\nimport { round } from \"mathjs\";\nimport { snakeCase, camelCase } from \"lodash\";\nimport {subscriptionKeys, updateSubscriptionPathMapping} from \"./constants\";\nimport debug from \"debug\";\n\nconst logger = debug('agent-toolkit:payloadUtils');\n\nexport function parseOrderDetails(params: TypeOf<ReturnType<typeof createOrderParameters>>) {\n    try {\n        const currCode = params.currencyCode;\n        let items: any[] = [];\n        const subTotal = params.items.reduce((sum, item) => sum + item.itemCost * item.quantity, 0);\n        const shippingCost = params.shippingCost || 0;\n        const taxAmount = params.items.reduce((sum, item) => sum + item.itemCost * item.taxPercent * item.quantity / 100, 0)\n        const discount = params.discount || 0;\n        const total = subTotal + taxAmount + shippingCost - discount;\n        const amountBreakdown = {\n            item_total: {\n                value: round(subTotal, 2).toString(),\n                currency_code: currCode\n            },\n            shipping: {\n                value: round(shippingCost, 2).toString(),\n                currency_code: currCode\n            },\n            tax_total: {\n                value: round(taxAmount, 2).toString(),\n                currency_code: currCode\n            },\n            discount: {\n                value: round(discount, 2).toString(),\n                currency_code: currCode\n            },\n        }\n        params.items.forEach(item => {\n            items.push({\n                name: item.name,\n                description: item.description,\n                unit_amount: {\n                    value: item.itemCost.toString() || '0',\n                    currency_code: currCode\n                },\n                quantity: item.quantity.toString() || '1',\n                tax: {\n                    value: round((item.itemCost * item.taxPercent) / 100, 2).toString() || '0',\n                    currency_code: currCode\n                }\n            })\n        })\n        const basePurchaseUnit = {\n            amount: {\n                value: round(total, 2).toString(),\n                currency_code: currCode,\n                breakdown: amountBreakdown\n            },\n            items: items,\n        }\n        // Conditionally add shipping address if available\n        const purchaseUnit = params.shippingAddress\n            ? { ...basePurchaseUnit, shipping: { address: params.shippingAddress } }\n            : basePurchaseUnit;\n        const request = {\n            intent: 'CAPTURE',\n            purchase_units: [purchaseUnit],\n        }\n        if (params.returnUrl || params.cancelUrl) {\n            // @ts-expect-error\n            request.payment_source = {\n                paypal: {\n                    experience_context: {\n                        return_url: params.returnUrl,\n                        cancel_url: params.cancelUrl\n                    }\n                }\n            }\n        }\n        return request;\n    } catch (error) {\n        console.error(error);\n        throw new Error('Failed to parse order details');\n    }\n}\n\ntype opType = {\n    op: string,\n    path: string,\n    value?: any\n}\n\nconst subscriptionKeysWithAddOperations = [subscriptionKeys.customId, subscriptionKeys.taxesInclusive, subscriptionKeys.taxesPercentage, subscriptionKeys.shippingAmount, subscriptionKeys.shippingAddress]\n// These keys have an \"add\" possible operation in the update subscription payload\n\nexport const parseUpdateSubscriptionPayload = (params: TypeOf<ReturnType<typeof updateSubscriptionParameters>>, subscriptionDetails: any) => {\n\n    const currCode = params.currency_code || \"USD\";\n    const operations = [];\n\n    for(let key in params){\n        if(key === subscriptionKeys.subscriptionId || key === subscriptionKeys.currencyCode) continue;\n        const path = updateSubscriptionPathMapping[key];\n        if(!path) {\n            throw new Error(`Unsupported field for update: ${key}`);\n        }\n\n        let op = \"replace\";\n\n        if(subscriptionKeysWithAddOperations.includes(key as subscriptionKeys)){\n            const pathArray = path.split(\"/\");\n            pathArray.shift()\n            const doesValueExist = pathArray.reduce((obj, key) => obj?.[key], subscriptionDetails);\n            if(doesValueExist === undefined) op = \"add\";\n        }\n\n        let opItem: opType = { op, path}\n        let opValue = params[key as keyof typeof params];\n\n        // Custom logic for fixed price to handle sequence replacement in path\n        if(key === subscriptionKeys.fixedPrice){\n            opItem.path = path.replace(\"{0}\", opValue?.sequence || 1)\n            delete opValue?.sequence\n            opValue = opValue?.value;\n        }\n\n        // Creating the value structure expected in the payload\n        if([subscriptionKeys.outstandingBalance, subscriptionKeys.shippingAmount, subscriptionKeys.fixedPrice].includes(key as subscriptionKeys)){\n            opItem.value = {\n                currency_code: currCode,\n                value: opValue\n            }\n        } else{\n            opItem.value = opValue\n        }\n        operations.push(opItem);\n    }\n\n    logger(\"Update Subscription Operations\", JSON.stringify(operations));\n    return operations;\n}\n\nexport const toSnakeCaseKeys = (obj: any): any => {\n    if (Array.isArray(obj)) {\n        return obj.map(toSnakeCaseKeys);\n    } else if (typeof obj === \"object\" && obj !== null) {\n        return Object.fromEntries(\n            Object.entries(obj).map(([key, value]) => [snakeCase(key), toSnakeCaseKeys(value)])\n        );\n    }\n    return obj;\n};\n\nexport const toCamelCaseKeys = (obj: any): any => {\n    if (Array.isArray(obj)) {\n        return obj.map(toCamelCaseKeys);\n    } else if (typeof obj === 'object' && obj !== null) {\n        return Object.fromEntries(\n            Object.entries(obj).map(([key, value]) => [camelCase(key), toCamelCaseKeys(value)])\n        );\n    }\n    return obj;\n};\n\nexport function toQueryString(params: TypeOf<ReturnType<typeof listDisputesParameters>>): string {\n    return Object.entries(params)\n      .filter(([_, value]) => value !== undefined && value !== null)\n      .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`)\n      .join('&');\n  }","\n\nexport enum subscriptionKeys {\n  outstandingBalance = 'outstanding_balance',\n  customId = 'custom_id',\n  fixedPrice = 'fixed_price',\n  paymentFailureThreshold = 'payment_failure_threshold',\n  autoBillOutstanding = 'auto_bill_outstanding',\n  taxesInclusive = 'taxes_inclusive',\n  taxesPercentage = 'taxes_percentage',\n  shippingAmount = 'shipping_amount',\n  shippingAddress = 'shipping_address',\n  subscriptionId = 'subscription_id',\n  currencyCode = 'currency_code',\n}\n\n\nexport const updateSubscriptionPathMapping: Record<string, string> = {\n  [subscriptionKeys.outstandingBalance]: \"/billing_info/outstanding_balance\",\n  [subscriptionKeys.customId]: \"/custom_id\",\n  [subscriptionKeys.fixedPrice]: \"/plan/billing_cycles/@sequence=={0}/pricing_scheme/fixed_price\",\n  [subscriptionKeys.paymentFailureThreshold]: \"/plan/payment_preferences/payment_failure_threshold\",\n  [subscriptionKeys.autoBillOutstanding]: \"/plan/payment_preferences/auto_bill_outstanding\",\n  [subscriptionKeys.taxesInclusive]: \"/plan/taxes/inclusive\",\n  [subscriptionKeys.taxesPercentage]: \"/plan/taxes/percentage\",\n  [subscriptionKeys.shippingAmount]: \"/shipping_amount\",\n  [subscriptionKeys.shippingAddress]: \"/subscriber/shipping_address\"\n}","import { Client, Environment, LogLevel } from '@paypal/paypal-server-sdk';\nimport axios from 'axios';\nimport { Buffer } from 'buffer';\nimport os from 'os';\nimport { version } from '../../package.json';\nimport { Context } from './configuration';\nimport debug from \"debug\";\n\n\nconst logger = debug('agent-toolkit:client');\n\nclass PayPalClient {\n    private _sdkClient: Client | undefined;\n    private _clientId: string | undefined;\n    private _clientSecret: string | undefined;\n    private _isSandbox: boolean;\n    private _accessToken: string | undefined;\n    private _baseUrl: string\n    private _context: Context\n\n    constructor({ clientId, clientSecret, context }: {\n        clientId: string,\n        clientSecret: string,\n        context: Context\n    });\n\n    constructor({ context, accessToken }: {\n        context: Context,\n        accessToken?: string\n    });\n\n    constructor({ clientId, clientSecret, context, accessToken }: {\n        clientId?: string,\n        clientSecret?: string,\n        context: Context,\n        accessToken?: string\n    }) {\n\n        this._context = context;\n        const debugSdk = this._context.debug ?? false;\n        this._clientId = clientId;\n        this._clientSecret = clientSecret;\n        this._isSandbox = this._context?.sandbox ?? false;\n        this._accessToken = accessToken;\n        if (this._clientId !== undefined && this._clientSecret !== undefined) {\n            this.createSDKClient(this._clientId, this._clientSecret, debugSdk);\n        }\n\n        this._baseUrl = this._isSandbox\n        ? 'https://api.sandbox.paypal.com'\n        : 'https://api.paypal.com';\n\n        logger(`[PayPal Setttings] Environment: ${this._isSandbox ? \"Sandbox\" : \"Live\"}`);\n        logger(`[PayPal Setttings] API Base: ${this._baseUrl}`);\n    }\n\n    private createSDKClient(clientId: string, clientSecret: string, debugSdk: boolean) {\n\n        this._sdkClient = new Client({\n            clientCredentialsAuthCredentials: {\n                oAuthClientId: clientId,\n                oAuthClientSecret: clientSecret\n            },\n            timeout: 0,\n            environment: this._isSandbox ? Environment.Sandbox : Environment.Production,\n            ...(debugSdk && {\n                logging: {\n                    logLevel: LogLevel.Info,\n                    maskSensitiveHeaders: true,\n                    logRequest: {\n                        logBody: true,\n                    },\n                    logResponse: {\n                        logBody: true,\n                        logHeaders: true,\n                    },\n                }\n            }),\n        });\n    }\n\n    async getAccessToken(): Promise<string> {\n        const auth = Buffer.from(`${this._clientId}:${this._clientSecret}`).toString('base64');\n        const url = this._baseUrl+'/v1/oauth2/token';\n        try {\n            const response = await axios.post(\n                url,\n                'grant_type=client_credentials',\n                {\n                    headers: {\n                        'Authorization': `Basic ${auth}`,\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                        'User-Agent': this.generateUserAgent(),\n                    },\n                }\n            );\n            return response.data.access_token;\n        } catch (error: any) {\n            if (axios.isAxiosError(error)) {\n                throw new Error(`Failed to fetch access token: ${error.response?.data?.error_description || error.message}`);\n            } else {\n                throw new Error(`Failed to fetch access token: ${error instanceof Error ? error.message : String(error)}`);\n            }\n        }\n    }\n\n    // Helper method to get base URL\n    getBaseUrl(): string {\n        return this._baseUrl;\n    }\n\n    // Helper method to get headers\n    async getHeaders(): Promise<Record<string, string>> {\n        const headers: Record<string, string> = {\n            'Content-Type': 'application/json',\n        };\n\n        this._accessToken = this._accessToken || (await this.getAccessToken());\n        headers['Authorization'] = `Bearer ${this._accessToken}`;\n\n        // Add additional headers if needed\n        if (this._context.request_id) {\n            headers['PayPal-Request-Id'] = this._context.request_id;\n        }\n\n        if (this._context.tenant_context) {\n            headers['PayPal-Tenant-Context'] = JSON.stringify(this._context.tenant_context);\n        }\n\n        headers['User-Agent'] = this.generateUserAgent();\n\n        return headers;\n    }\n\n    private generateUserAgent(): string {\n        const components = [\n            `PayPal Agent Toolkit Typescript: ${this._context.source}`,\n            `Version: ${version}`,\n            `on OS: ${os.platform()} ${os.release()}`\n        ];\n\n        return components.filter(Boolean).join(', ');\n    }\n\n}\n\nexport default PayPalClient;\n","{\n  \"name\": \"@paypal/agent-toolkit\",\n  \"version\": \"1.3.5\",\n  \"description\": \"PayPal toolkit for AI agent workflows in typescript\",\n  \"scripts\": {\n    \"clean\": \"rm -rf dist ai-sdk mcp\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"npm i && tsup\",\n    \"build:debug\": \"TSUP_DEBUG=true npm run build\"\n  },\n  \"exports\": {\n    \"./ai-sdk\": {\n      \"types\": \"./ai-sdk/index.d.ts\",\n      \"default\": \"./ai-sdk/index.js\"\n    },\n    \"./mcp\": {\n      \"types\": \"./mcp/index.d.ts\",\n      \"default\": \"./mcp/index.js\"\n    }\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"files\": [\n    \"ai-sdk\",\n    \"mcp\",\n    \"package.json\"\n  ],\n  \"devDependencies\": {\n    \"@types/debug\": \"^4.1.12\",\n    \"@types/jest\": \"^29.5.14\",\n    \"@types/lodash\": \"^4.17.15\",\n    \"@types/node\": \"^22.10.5\",\n    \"jest\": \"^29.7.0\",\n    \"ts-jest\": \"^29.2.5\",\n    \"ts-node\": \"^10.9.2\",\n    \"tsup\": \"^8.3.6\",\n    \"tsx\": \"^4.19.2\",\n    \"typescript\": \"^5.7.2\"\n  },\n  \"dependencies\": {\n    \"@dotenvx/dotenvx\": \"^1.32.0\",\n    \"@modelcontextprotocol/sdk\": \"^1.6.1\",\n    \"@paypal/paypal-server-sdk\": \"^1.0.0\",\n    \"ai\": \"^4.0.23\",\n    \"axios\": \"^1.8.4\",\n    \"debug\": \"^4.4.0\",\n    \"fast-json-patch\": \"^3.1.1\",\n    \"lodash\": \"^4.17.21\",\n    \"mathjs\": \"^14.0.1\",\n    \"os\": \"^0.1.2\",\n    \"zod\": \"^3.24.2\"\n  }\n}\n","import {\n  createInvoice,\n  listInvoices,\n  getInvoice,\n  sendInvoice,\n  sendInvoiceReminder,\n  cancelSentInvoice,\n  createProduct,\n  listProducts,\n  createSubscriptionPlan,\n  listSubscriptionPlans,\n  createShipment,\n  getShipmentTracking,\n  generateInvoiceQrCode,\n  createOrder,\n  getOrder,\n  listDisputes,\n  getDispute,\n  acceptDisputeClaim,\n  captureOrder, listTransactions,\n  createSubscription,\n  showProductDetails,\n  showSubscriptionPlanDetails,\n  showSubscriptionDetails,\n  cancelSubscription,\n  createRefund,\n  getRefund,\n  updateSubscription\n} from './functions';\n\nimport type { Context } from './configuration';\nimport PayPalClient from './client';\n\nclass PayPalAPI {\n  paypalClient: PayPalClient;\n  context: Context;\n  baseUrl: string;\n  accessToken?: string;\n\n  constructor(paypalClientOrAccessToken: PayPalClient | string, context?: Context) {\n    this.context = context || {};\n\n    // Set default sandbox mode if not provided\n    this.context.sandbox = this.context.sandbox ?? false;\n    this.baseUrl = this.context.sandbox ? 'https://api-m.sandbox.paypal.com' : 'https://api-m.paypal.com';\n\n    if (typeof paypalClientOrAccessToken === 'string') {\n      this.accessToken = paypalClientOrAccessToken;\n      this.paypalClient = new PayPalClient({context: this.context, accessToken: this.accessToken });\n    } else {\n      this.paypalClient = paypalClientOrAccessToken;\n    }\n\n    \n\n  }\n\n\n  async run(method: string, arg: any): Promise<string> {\n    try {\n      const output = await this.executeMethod(method, arg);\n      return JSON.stringify(output);\n    } catch (error: any) {\n      const errorMessage = error.message || 'Unknown error';\n      return JSON.stringify({\n        error: {\n          message: errorMessage,\n          type: 'paypal_error',\n        },\n      });\n    }\n  }\n\n  private async executeMethod(method: string, arg: any): Promise<any> {\n    switch (method) {\n      case 'create_invoice':\n        return createInvoice(this.paypalClient, this.context, arg);\n      case 'list_invoices':\n        return listInvoices(this.paypalClient, this.context, arg);\n      case 'get_invoice':\n        return getInvoice(this.paypalClient, this.context, arg);\n      case 'send_invoice':\n        return sendInvoice(this.paypalClient, this.context, arg);\n      case 'send_invoice_reminder':\n        return sendInvoiceReminder(this.paypalClient, this.context, arg);\n      case 'cancel_sent_invoice':\n        return cancelSentInvoice(this.paypalClient, this.context, arg);\n      case 'generate_invoice_qr_code':\n        return generateInvoiceQrCode(this.paypalClient, this.context, arg);\n      case 'create_product':\n        return createProduct(this.paypalClient, this.context, arg);\n      case 'list_products':\n        return listProducts(this.paypalClient, this.context, arg);\n      case 'show_product_details':\n        return showProductDetails(this.paypalClient, this.context, arg);\n      case 'create_subscription_plan':\n        return createSubscriptionPlan(this.paypalClient, this.context, arg);\n      case 'list_subscription_plans':\n        return listSubscriptionPlans(this.paypalClient, this.context, arg);\n      case 'show_subscription_plan_details':\n        return showSubscriptionPlanDetails(this.paypalClient, this.context, arg);\n      case 'create_subscription':\n        return createSubscription(this.paypalClient, this.context, arg);\n      case 'show_subscription_details':\n        return showSubscriptionDetails(this.paypalClient, this.context, arg);\n      case 'cancel_subscription':\n        return cancelSubscription(this.paypalClient, this.context, arg);\n      case 'update_subscription':\n        return updateSubscription(this.paypalClient, this.context, arg);\n      case 'create_shipment_tracking':\n        return createShipment(this.paypalClient, this.context, arg);\n      case 'get_shipment_tracking':\n        return getShipmentTracking(this.paypalClient, this.context, arg);\n      case 'create_order':\n        return createOrder(this.paypalClient, this.context, arg);\n      case 'get_order':\n        return getOrder(this.paypalClient, this.context, arg);\n      case 'pay_order':\n        return captureOrder(this.paypalClient, this.context, arg);\n      case 'list_disputes':\n        return listDisputes(this.paypalClient, this.context, arg);\n      case 'get_dispute':\n        return getDispute(this.paypalClient, this.context, arg);\n      case 'accept_dispute_claim':\n        return acceptDisputeClaim(this.paypalClient, this.context, arg);\n      case 'list_transactions':\n        return listTransactions(this.paypalClient, this.context, arg);\n      case 'create_refund':\n        return createRefund(this.paypalClient, this.context, arg);\n      case 'get_refund':\n        return getRefund(this.paypalClient, this.context, arg);\n      default:\n        throw new Error(`Invalid method: ${method}`);\n    }\n  }\n}\n\nexport default PayPalAPI;\n","import type { Context } from './configuration';\n\n// === INVOICE PARAMETERS ===\n\nexport const createInvoicePrompt = (context: Context) => `\nCreate Invoices on PayPal.\n\nThis function is used to create an invoice in the PayPal system. It allows you to generate a new invoice, specifying details such as customer information, items, quantities, pricing, and tax information. Once created, an invoice can be sent to the customer for payment.\n`;\n\nexport const listInvoicesPrompt = (context: Context) => `\nList invoices from PayPal.\n\nThis function retrieves a list of invoices with optional pagination parameters.\n`;\n\nexport const getInvoicePrompt = (context: Context) => `\nGet an invoice from PayPal.\n\nThis function retrieves details of a specific invoice using its ID.\n`\n\nexport const sendInvoicePrompt = (context: Context) => `\nSend an invoice to the recipient(s).\n\nThis function sends a previously created invoice to its intended recipients.\n`;\n\nexport const sendInvoiceReminderPrompt = (context: Context) => `\nSend a reminder for an invoice.\n\nThis function sends a reminder for an invoice that has already been sent but hasn't been paid yet.\n`;\n\nexport const cancelSentInvoicePrompt = (context: Context) => `\nCancel a sent invoice.\n\nThis function cancels an invoice that has already been sent to the recipient(s).\n`;\n\nexport const generateInvoiceQrCodePrompt = (context: Context) => `\nGenerate a QR code for an invoice.\n\nThis function generates a QR code for an invoice, which can be used to pay the invoice using a mobile device or scanning app.\n`;\n\nexport const createProductPrompt = (context: Context) => `\nCreate a product in PayPal using product catalog - create products API.\nThis function creates a new product that will be used in subscription plans, subscriptions.\nRequired parameters are: name (product name), type (product type).\nHigh level: \n    - id: (auto-generated or specify SKU of the product) The ID of the product\n    - name: {product_name} (required) \n    - description: {product_description} (optional)\n    - type {DIGITAL | PHYSICAL | SERVICE} (required)\n    - category: {product_category} (optional) \n    - image_url: {image_url} (optional)\n    - home_url: {home_url} (optional)\n\nBelow is the payload request structure:\n{\n    \"id\": \"#PROD-XYAB12ABSB7868434\",\n    \"name\": \"Video Streaming Service\",\n    \"description\": \"Service for streaming latest series, movies etc.\",\n    \"type\": \"SERVICE\",\n    \"category\": \"SOFTWARE\",\n    \"image_url\": \"https://example.com/streaming.jpg\",\n    \"home_url\": \"https://example.com/home\"\n}\n\n`;\n\nexport const listProductsPrompt = (context: Context) => `\nList products from PayPal.\n\nThis function retrieves a list of products with optional pagination parameters.\n`;\n\nexport const showProductDetailsPrompt = (context: Context) => `\nList products from PayPal.\n\nThis function retrieves a list of products with optional pagination parameters.\n`;\n\nexport const updateProductPrompt = (context: Context) => `\nUpdate a product in PayPal.\n\nThis function updates an existing product using JSON Patch operations.\n`;\n\nexport const createSubscriptionPlanPrompt = (context: Context) => `\nCreate a subsctiption plan in PayPal using subscription - create plan API.\nThis function creates a new subscription plan that defines pricing and billing cycle details for subscriptions.\nRequired parameters are: product_id (the ID of the product for which to create the plan), name (subscription plan name), billing_cycles (billing cycle details).\nHigh level: product_id, name, description, taxes, status: {CREATED|INACTIVE|ACTIVE}, billing_cycles, payment_preferences are required in json object.\nWhile creating billing_cycles object, trial(second) billing cycle should precede regular billing cycle.\n`;\n\nexport const listSubscriptionPlansPrompt = (context: Context) => `\nList subscription plans from PayPal.\n\nThis function retrieves a list of subscription plans with optional product filtering and pagination parameters.\n`;\n\nexport const showSubscriptionPlanDetailsPrompt = (context: Context) => `\nShow subscription plan details from PayPal.\nThis function retrieves the details of a specific subscription plan using its ID.\nRequired parameters are: plan_id (the ID of the subscription plan).\n`;\n\nexport const createSubscriptionPrompt = (context: Context) => `\nCreate a subscription in PayPal using the subscription - create subscription API.\nThis function allows you to create a new subscription for a specific plan, enabling the management of recurring payments.\nThe only required parameter is plan_id (the ID of the subscription plan). All other fields are optional and can be omitted if not provided.\nThe subscriber field is optional. If no subscriber information is provided, omit the subscriber field in the request payload.\nThe shipping address is optional. If no shipping address is provided, set the shipping_preference to GET_FROM_FILE in the application context.\nThe application context is also optional. If no application context information is provided, omit the application context field in the request payload.\n`;\n\nexport const showSubscriptionDetailsPrompt = (context: Context) => `\nShow subscription details from PayPal.\nThis function retrieves the details of a specific subscription using its ID.\nRequired parameters are: subscription_id (the ID of the subscription).\n`;\n\n\nexport const cancelSubscriptionPrompt = (context: Context) => `\nCancel a customer subscription in PayPal.\n\nThis function cancels an active subscription for a customer. It requires the subscription ID and an optional reason for cancellation.\nRequired parameters are: subscription_id (the ID of the subscription to be canceled).\nBelow is the payload request structure:\n{\n    \"reason\": \"Customer requested cancellation\"\n}\nYou MUST ask the user for: \n - subscription_id\n - reason for cancellation.\n\nReturn all of the above as structured JSON in your response.\n`;\n\nexport const updateSubscriptionPrompt = (context: Context) => `\nUpdate a customer subscription in PayPal.\n\nThis function updates an active or suspended subscription for a customer. It requires the subscription ID and payload of allowed keys to update to the subscription.\nRequired parameters are: subscription_id (the ID of the subscription to be updated), and at-least one key to update\n\nReturn response as structured JSON in your response.\n`;\n\n\nexport const createShipmentPrompt = (context: Context) => `\nCreate a shipment for a transaction in PayPal.\nThis function creates a shipment record for a specific transaction, allowing you to track the shipment status and details.\nThe transaction_id can fetch from the captured payment details in the order information.\nRequired parameters are: tracking_number (the tracking number for the shipment), transaction_id (the transaction ID associated with the shipment). \nHigh level: tracking_number, transaction_id, status (optional), carrier (optional) are required json objects.\nBelow is the payload request structure:\n{\n    \"tracking_number\": \"1234567890\",\n    \"transaction_id\": \"9XJ12345ABC67890\",\n    \"status\": \"SHIPPED\", // Required: ON_HOLD, SHIPPED, DELIVERED, CANCELLED\n    \"carrier\": \"UPS\" // Required: The carrier handling the shipment. Link to supported carriers: http://developer.paypal.com/docs/tracking/reference/carriers/\n}\n`;\n\nexport const getShipmentTrackingPrompt = (context: Context) => `\nGet tracking information for a shipment by ID.\nThis function retrieves tracking information for a specific shipment using the transaction ID and tracking number.\nThe transaction_id can fetch from the captured payment details in the order information.\nBelow is the payload request structure:\n`;\n\n// === ORDER PROMPTS ===\n\nexport const createOrderPrompt = (context: Context) => `\nCreate an order in PayPal.\n\nThis tool is used to create a new order in PayPal. This is typically the first step in initiating a payment flow. It sets up an order with specified details such as item(s) to be purchased, quantity, amount, currency, and other details.\n`;\n\nexport const getOrderPrompt = (context: Context) => `\nRetrieves the order details from PayPal for a given order ID.\n\nThis tool is used to retrieve details of an existing order in PayPal. It provides information about the order, including items, amounts, status, and other relevant details.\n`;\n\nexport const captureOrderPrompt = (context: Context) => `\nCapture a payment for an order.\n\nThis tool is used to capture a payment for an order. It allows you to capture funds that have been authorized for a specific order but not yet captured.\n`;\n// === DISPUTE PROMPTS ===\n\nexport const listDisputesPrompt = (context: Context) => `\nList disputes from PayPal.\n\nThis function retrieves a list of disputes with optional pagination and filtering parameters.\n`;\n\nexport const getDisputePrompt = (context: Context) => `\nGet details for a specific dispute from PayPal.\n\nThis tool is used to lists disputes with a summary set of details, which shows the dispute_id, reason, status, dispute_state, dispute_life_cycle_stage, dispute_channel, dispute_amount, create_time and update_time fields.\n`;\n\nexport const acceptDisputeClaimPrompt = (context: Context) => `\nAccept liability for a dispute claim.\n\nThis tool is used to accept liability for a dispute claim. When you accept liability for a dispute claim, the dispute closes in the customer's favor and PayPal automatically refunds money to the customer from the merchant's account.\n`\n\nexport const listTransactionsPrompt = (context: Context) => `\nList transactions from PayPal.\n\nThis tool is used to list transactions with optional filtering parameters within a date range of 31 days. This tool can also be used to list details of a transaction given the transaction ID.\n\n- The start_date and end_date should be specified in ISO8601 date and time format. Example dates: 1996-12-19T16:39:57-08:00, 1985-04-12T23:20:50.52Z, 1990-12-31T23:59:60Z\n- The transaction_status accepts the following 4 values:\n    1. \"D\" - represents denied transactions.\n    2. \"P\" - represents pending transactions.\n    3. \"S\" - represents successful transactions.\n    4. \"V\" - represents transactions that were reversed.\n- The transaction_id is the unique identifier for the transaction.\n`\n\nexport const getRefundPrompt = (context: Context) => `\nRetrieve detailed information about a PayPal payment refund.\nIf you have an order ID instead of a refund ID, first use the get order tool to obtain the refund ID from the order details. \nThis function returns comprehensive details about a refund, including its current status (completed, pending, cancelled), refunded amount, and processing information.\nWhen multiple refunds exist for an order or capture, request clarification on which specific refund to retrieve. \nResponse details include:\n- Refund status and ID\n- Refunded amount and currency\n- Reason for refund (if provided)\n- Source transaction details\n`;\n\nexport const createRefundPrompt = (context: Context) => `\nInitiate a refund for a PayPal payment capture.\nIf you have an order ID instead of a capture ID, first use the get order tool to obtain the capture ID from the order details.\nThis function allows you to return funds to a customer by refunding a previously captured payment. You can issue a full refund or specify a partial amount. If multiple captures exist for an order, request clarification on which specific capture to refund.\nRequired parameters:\n- Capture ID: The ID of the capture to refund\n- Amount (optional): For partial refunds, specify the amount to refund (must be less than or equal to the captured amount)\n- Note to Payer (optional): Additional explanation visible to the customer\nResponse details include:\n- Refund ID and status\n- Refunded amount and currency\n`;\n","import { z } from 'zod';\nimport type { Context } from './configuration';\nimport {subscriptionKeys} from \"./constants\";\n\n// === INVOICE PARAMETERS ===\nconst invoiceItem = z.object({\n  name: z.string().describe('The name of the item'),\n  quantity: z.string().describe('The quantity of the item that the invoicer provides to the payer. Value is from -1000000 to 1000000. Supports up to five decimal places. Cast to string'),\n  unit_amount: z.object({\n    currency_code: z.string().describe('Currency code of the unit amount'),\n    value: z.string().describe('The unit price. Up to 2 decimal points'),\n  }).describe(\"unit amount object\"),\n  tax: z.object({\n    name: z.string().optional().describe(\"Tax name\"),\n    percent: z.string().optional().describe(\"Tax Percent\"),\n  }).optional().describe(\"tax object\"),\n  unit_of_measure: z.enum([\"QUANTITY\", \"HOURS\", \"AMOUNT\"]).optional().describe(\"The unit of measure for the invoiced item\"),\n}).describe(\"invoice line item object\");\n\n\nexport const createInvoiceParameters = (context: Context) => z.object({\n  detail: z.object({\n    invoice_date: z.string().optional().describe(\"The invoice date in YYYY-MM-DD format\"),\n    currency_code: z.string().describe(\"currency code of the invoice\"),\n  }).describe(\"The invoice detail\"),\n  invoicer: z.object({\n    business_name: z.string().max(300).describe(\"business name of the invoicer\"),\n    name: z.object({\n      given_name: z.string().optional().describe(\"given name of the invoicer\"),\n      surname: z.string().optional().describe(\"surname of the invoicer\")\n    }).optional().describe(\"name of the invoicer\"),\n    email_address: z.string().optional().describe(\"email address of the invoicer\"),\n  }).optional().describe(\"The invoicer business information that appears on the invoice.\"),\n  primary_recipients: z.array(z.object({\n    billing_info: z.object({\n      name: z.object({\n        given_name: z.string().optional().describe(\"given name of the recipient\"),\n        surname: z.string().optional().describe(\"surname of the recipient\"),\n      }).optional().describe(\"name of the recipient\"),\n      email_address: z.string().describe(\"email address of the recipient\").optional(),\n    }).describe(\"The billing information of the invoice recipient\").optional(),\n  })).describe(\"array of recipients\").optional(),\n  items: z.array(invoiceItem).describe(\"Array of invoice line items\").optional(),\n}).describe(\"create invoice request payload\");\n\nexport const getInvoicParameters = (context: Context) => z.object({\n  invoice_id: z.string().describe('The ID of the invoice to retrieve.'),\n});\n\nexport const listInvoicesParameters = (context: Context) =>\n  z.object({\n    page: z.number().default(1).optional().describe('The page number of the result set to fetch.').default(1),\n    page_size: z.number().min(1).max(100).default(100).optional().describe('The number of records to return per page (maximum 100).'),\n    total_required: z.boolean().optional().describe('Indicates whether the response should include the total count of items.'),\n  });\n\nexport const sendInvoiceParameters = (context: Context) =>\n  z.object({\n    invoice_id: z.string().describe('The ID of the invoice to send.'),\n    note: z.string().optional().describe('A note to the recipient.'),\n    send_to_recipient: z.boolean().optional().describe('Indicates whether to send the invoice to the recipient.'),\n    additional_recipients: z.array(z.string()).optional().describe('Additional email addresses to which to send the invoice.'),\n  });\n\nexport const sendInvoiceReminderParameters = (context: Context) =>\n  z.object({\n    invoice_id: z.string().describe('The ID of the invoice for which to send a reminder.'),\n    subject: z.string().optional().describe('The subject of the reminder email.'),\n    note: z.string().optional().describe('A note to the recipient.'),\n    additional_recipients: z.array(z.string()).optional().describe('Additional email addresses to which to send the reminder.'),\n  });\n\nexport const cancelSentInvoiceParameters = (context: Context) =>\n  z.object({\n    invoice_id: z.string().describe('The ID of the invoice to cancel.'),\n    note: z.string().optional().describe('A cancellation note to the recipient.'),\n    send_to_recipient: z.boolean().optional().describe('Indicates whether to send the cancellation to the recipient.'),\n    additional_recipients: z.array(z.string()).optional().describe('Additional email addresses to which to send the cancellation.'),\n  });\n\nexport const generateInvoiceQrCodeParameters = (context: Context) => z.object({\n  invoice_id: z.string().describe('The invoice id to generate QR code for'),\n  width: z.number().default(300).describe(\"The QR code width\"),\n  height: z.number().default(300).describe(\"The QR code height\")\n}).describe(\"generate invoice qr code request payload\");\n\n\nexport const updateProductParameters = (context: Context) =>\n  z.object({\n    product_id: z.string().describe('The ID of the product to update.'),\n    operations: z.array(z.object({}).passthrough()).describe('The PATCH operations to perform on the product.'),\n  });\n\nexport const createShipmentParameters = (context: Context) =>\n  z.object({\n    order_id: z.string().describe('The ID of the order for which to create a shipment').optional(),\n    tracking_number: z.string().describe('The tracking number for the shipment. Id is provided by the shipper. This is required to create a shipment.'),\n    transaction_id: z.string().describe('The transaction ID associated with the shipment. Transaction id available after the order is paid or captured. This is required to create a shipment.'),\n    status: z.string().optional().describe('The status of the shipment. It can be \"ON_HOLD\", \"SHIPPED\", \"DELIVERED\", or \"CANCELLED\".').default(\"SHIPPED\"),\n    carrier: z.string().optional().describe('The carrier handling the shipment.'),\n  });\n\nexport const getShipmentTrackingParameters = (context: Context) =>\n  z.object({\n    order_id: z.string().describe('The ID of the order for which to create a shipment.').optional(),\n    transaction_id: z.string().describe('The transaction ID associated with the shipment tracking to retrieve.').optional(),\n  });\n\n// === ORDER PARAMETERS ===\n/**\n * Parameters are defined and exported both as Type and as ZodSchema to avoid runtime conversions.\n */\n\nconst itemDetails = z.object({\n  itemCost: z.number().describe('The cost of each item - upto 2 decimal points.'),\n  taxPercent: z.number().describe('The tax percent for the specific item.').default(0),\n  itemTotal: z.number().describe('The total cost of this line item.'),\n});\n\nconst lineItem = z.object({\n  name: z.string().describe('The name of the item.'),\n  quantity: z.number().describe('The item quantity. Must be a whole number.').default(1),\n  description: z.string().describe('The detailed item description.').optional(),\n}).merge(itemDetails); // Merge itemDetails into lineItem\n\nconst shippingAddress = z.object({\n  address_line_1: z.string().describe('The first line of the address, such as number and street, for example, `173 Drury Lane`.This field needs to pass the full address.').optional(),\n  address_line_2: z.string().describe(`The second line of the address, for example, a suite or apartment number.`).optional(),\n  admin_area_2: z.string().describe('A city, town, or village. Smaller than `admin_area_level_1`.').optional(),\n  admin_area_1: z.string().describe('The highest-level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. ').optional(),\n  postal_code: z.string().describe('The postal code, which is the ZIP code or equivalent. Typically required for countries with a postal code or an equivalent.').optional(),\n  country_code: z.string().describe('The 2-character ISO 3166-1 code that identifies the country or region. Note: The country code for Great Britain is `GB` and not `UK` as used in the top-level domain names for that country.').length(2).optional()\n}).describe('The shipping address for the order.')\n\nexport const createOrderParameters = (context: Context) => z.object({\n  currencyCode: z.enum(['USD']).describe('Currency code of the amount.'),\n  items: z.array(z.lazy(() => lineItem)).max(50),\n  discount: z.number().describe('The discount amount for the order.').default(0).optional(),\n  shippingCost: z.number().describe('The cost of shipping for the order.').default(0).optional(),\n  shippingAddress: z.optional(shippingAddress.nullable()).default(null).describe('The shipping address for the order.'),\n  notes: z.string().optional().nullable().default(null),\n  returnUrl: z.string().optional().default('https://example.com/returnUrl'),\n  cancelUrl: z.string().optional().default('https://example.com/cancelUrl')\n});\n\nexport const getOrderParameters = (context: Context) => z.object({\n  id: z.string().describe('The order id generated during create call'),\n});\n\nexport const captureOrderParameters = (context: Context) => z.object({\n  id: z.string().describe('The order id generated during create call'),\n});\n\n// === Disputes Parameters ===\n\nexport const listDisputesParameters = (context: Context) => z.object({\n  disputed_transaction_id: z.string().nullable().default(null),\n  dispute_state: z.enum([\n    \"REQUIRED_ACTION\",\n    \"REQUIRED_OTHER_PARTY_ACTION\",\n    \"UNDER_PAYPAL_REVIEW\",\n    \"RESOLVED\",\n    \"OPEN_INQUIRIES\",\n    \"APPEALABLE\"]).optional().describe(\"OPEN_INQUIRIES\"),\n  page_size: z.number().default(10).optional(),\n  page: z.number().default(1).optional()\n});\n\nexport const getDisputeParameters = (context: Context) => z.object({\n  dispute_id: z.string().describe('The order id generated during create call'),\n})\n\nexport const acceptDisputeClaimParameters = (context: Context) => z.object({\n  dispute_id: z.string(),\n  note: z.string().describe(\"A note about why the seller is accepting the claim\"),\n});\n\n// === Transaction Search ===\n\nexport const listTransactionsParameters = (context: Context) => z.object({\n  transaction_id: z.string().optional().describe('The ID of the transaction to retrieve.').nullable().default(null),\n  transaction_status: z.enum([\n    \"D\",\n    \"P\",\n    \"S\",\n    \"V\"]).optional().default(\"S\"),\n  start_date: z.string().describe('Filters the transactions in the response by a start date and time, in ISO8601 date and time format. Seconds are required. Fractional seconds are optional.').optional()    .default(() => {\n    const now = new Date();\n    now.setDate(now.getDate() - 31); // default to 31 days ago\n    return now.toISOString();\n  }),\n  end_date: z.string().describe('Filters the transactions in the response by an end date and time, in ISO8601 date and time format. Seconds are required. Fractional seconds are optional. The maximum supported range is 31 days.').optional().default(() => {\n    const now = new Date();\n    now.setDate(now.getDate());\n    return now.toISOString();\n  }),\n  search_months: z.number().optional().describe('Number of months to search back for a transaction by ID. Default is 12 months.').default(12),\n  page_size: z.number().default(100).optional(),\n  page: z.number().default(1).optional()\n});\n\n\n//== PRODUCT PARAMETERS ===\nexport const createProductParameters = (context: Context) => z.object({\n  name: z.string().describe('The product name.'),\n  type: z.enum(['PHYSICAL', 'DIGITAL', 'SERVICE']).describe('The product type. Value is PHYSICAL, DIGITAL, or SERVICE.'),\n  description: z.string().optional().describe('The product description.'),\n  category: z.string().optional().describe('The product category.'),\n  image_url: z.string().optional().describe('The image URL for the product.'),\n  home_url: z.string().optional().describe('The home page URL for the product.'),\n});\n\nexport const listProductsParameters = (context: Context) => z.object({\n  page: z.number().optional().describe('The page number of the result set to fetch.'),\n  page_size: z.number().optional().describe('The number of records to return per page (maximum 100).'),\n  total_required: z.boolean().optional().describe('Indicates whether the response should include the total count of products.'),\n});\n\nexport const showProductDetailsParameters = (context: Context) => z.object({\n  product_id: z.string().describe('The ID of the product to update.'),\n});\n\n// === SUBSCRIPTION PLAN PARAMETERS ===\nconst frequencySchema = z.object({\n  interval_unit: z.enum(['DAY', 'WEEK', 'MONTH', 'YEAR']).describe('The unit of time for the billing cycle.'),\n  interval_count: z.number().describe('The number of units for the billing cycle.'),\n}).passthrough();\n\nconst fixedPriceSchema = z.object({\n  currency_code: z.enum(['USD']).describe('The currency code for the fixed price.'),\n  value: z.string().describe('The value of the fixed price.'),\n}).passthrough().optional().describe('The fixed price for the subscription plan.')\n\nconst pricingSchemeSchema = z.object({\n  fixed_price: fixedPriceSchema,\n  version: z.string().optional().describe('The version of the pricing scheme.'),\n}).passthrough();\n\nconst billingCycleSchema = z.object({\n  frequency: frequencySchema.describe('The frequency of the billing cycle.'),\n  tenure_type: z.enum(['REGULAR', 'TRIAL']).describe('The type of billing cycle tenure.'),\n  sequence: z.number().describe('The sequence of the billing cycle.'),\n  total_cycles: z.number().optional().describe('The total number of cycles in the billing plan.'),\n  pricing_scheme: pricingSchemeSchema.describe('The pricing scheme for the billing cycle.'),\n}).passthrough();\n\nconst setupFeeSchema = z.object({\n  currency_code: z.enum(['USD']).optional().describe('The currency code for the setup fee.'),\n  value: z.string().optional().describe('The value of the setup fee.'),\n}).passthrough().optional();\n\nconst autoBillOutstandingSchema = z.boolean().optional().describe('Indicates whether to automatically bill outstanding amounts.');\nconst paymentFailureThresholdSchema = z.number().optional().describe('The number of failed payments before the subscription is canceled.');\n\n\nconst paymentPreferencesSchema = z.object({\n  auto_bill_outstanding: autoBillOutstandingSchema,\n  setup_fee: setupFeeSchema.describe('The setup fee for the subscription plan.'),\n  setup_fee_failure_action: z.enum(['CONTINUE', 'CANCEL']).optional().describe('The action to take if the setup fee payment fails.'),\n  payment_failure_threshold: paymentFailureThresholdSchema,\n}).passthrough().optional();\n\nconst taxPercentageSchema = z.string().optional().describe('The tax percentage.');\nconst taxInclusiveSchema = z.boolean().optional().describe('Indicates whether the tax is inclusive.');\n\nconst taxesSchema = z.object({\n  percentage: taxPercentageSchema,\n  inclusive: taxInclusiveSchema,\n}).passthrough().optional();\n\nexport const createSubscriptionPlanParameters = (context: Context) => z.object({\n  product_id: z.string().describe('The ID of the product for which to create the plan.'),\n  name: z.string().describe('The subscription plan name.'),\n  description: z.string().optional().describe('The subscription plan description.'),\n  billing_cycles: z.array(billingCycleSchema).describe('The billing cycles of the plan.'),\n  payment_preferences: paymentPreferencesSchema.describe('The payment preferences for the subscription plan.'),\n  taxes: taxesSchema.describe('The tax details.'),\n});\n\nexport const listSubscriptionPlansParameters = (context: Context) => z.object({\n  product_id: z.string().optional().describe('The ID of the product for which to get subscription plans.'),\n  page: z.number().optional().describe('The page number of the result set to fetch.'),\n  page_size: z.number().optional().describe('The number of records to return per page (maximum 100).'),\n  total_required: z.boolean().optional().describe('Indicates whether the response should include the total count of plans.'),\n});\n\nexport const showSubscriptionPlanDetailsParameters = (context: Context) => z.object({\n  plan_id: z.string().describe('The ID of the subscription plan to show.'),\n});\n\n// === SUBSCRIPTION PARAMETERS ===\nconst NameSchema = z.object({\n  given_name: z.string().optional().describe('The subscriber given name.'),\n  surname: z.string().optional().describe('The subscriber last name.'),\n}).optional().describe('The subscriber name.');\n\nconst AddressSchema = z.object({\n  address_line_1: z.string().describe('The first line of the address.'),\n  address_line_2: z.string().optional().describe('The second line of the address.'),\n  admin_area_1: z.string().describe('The city or locality.'),\n  admin_area_2: z.string().describe('The state or province.'),\n  postal_code: z.string().describe('The postal code.'),\n  country_code: z.enum(['US']).describe('The country code.'),\n}).optional().describe('The shipping address.');\n\nconst ShippingAddressSchema = z.object({\n  name: NameSchema.describe('The subscriber shipping address name.'),\n  address: AddressSchema,\n}).optional().describe('The subscriber shipping address.');\n\nconst PaymentMethodSchema = z.object({\n  payer_selected: z.enum(['PAYPAL', 'CREDIT_CARD']).describe('The payment method selected by the payer.'),\n  payee_preferred: z.enum(['IMMEDIATE_PAYMENT_REQUIRED', 'INSTANT_FUNDING_SOURCE']).optional().describe('The preferred payment method for the payee.'),\n}).optional().describe('The payment method details.');\n\nconst ShippingAmount = z.object({\n  currency_code: z.enum(['USD']).describe('The currency code for the shipping amount.'),\n  value: z.string().describe('The value of the shipping amount.'),\n}).optional().describe('The shipping amount for the subscription.');\n\nconst Subscriber = z.object({\n  name: NameSchema,\n  email_address: z.string().optional().describe('The subscriber email address.'),\n  shipping_address: ShippingAddressSchema,\n}).optional().describe('The subscriber details.');\n\nconst ApplicationContext = z.object({\n  brand_name: z.string().describe('The brand name.'),\n  locale: z.string().optional().describe('The locale for the subscription.'),\n  shipping_preference: z.enum(['SET_PROVIDED_ADDRESS', 'GET_FROM_FILE']).optional().describe('The shipping preference.'),\n  user_action: z.enum(['SUBSCRIBE_NOW', 'CONTINUE']).optional().describe('The user action.'),\n  return_url: z.string().describe('The return URL after the subscription is created.'),\n  cancel_url: z.string().describe('The cancel URL if the user cancels the subscription.'),\n  payment_method: PaymentMethodSchema,\n}).optional().describe('The application context for the subscription.');\n\n\nexport const createSubscriptionParameters = (context: Context) => z.object({\n  plan_id: z.string().describe('The ID of the subscription plan to create.'),\n  quantity: z.number().optional().describe('The quantity of the product in the subscription.'),\n  shipping_amount: ShippingAmount,\n  subscriber: Subscriber,\n  application_context: ApplicationContext,\n});\n\nexport const showSubscriptionDetailsParameters = (context: Context) => z.object({\n  subscription_id: z.string().describe('The ID of the subscription to show details.'),\n  get_additional_details: z.boolean().optional().describe('Get all detailed information for the subscription.'),\n});\n\nexport const cancelSubscriptionParameters = (context: Context) => z.object({\n  subscription_id: z.string().describe('The ID of the subscription to show details.'),\n  payload: z.object({\n    reason: z.string().describe('The reason for the cancellation of a subscription.'),\n  }).passthrough().describe('Payload for subscription cancellation.'),\n});\n\nexport const updateSubscriptionParameters = (context: Context) => z.object({\n  [subscriptionKeys.subscriptionId]: z.string().describe('The ID of the subscription to update.'),\n  [subscriptionKeys.currencyCode]: z.enum(['USD']).optional().default(\"USD\").describe('Currency code of the amount.'),\n  [subscriptionKeys.outstandingBalance]: z.string().optional().describe('Outstanding Balance in the subscription'),\n  [subscriptionKeys.customId]: z.string().optional().describe(\"The custom id for the subscription\"),\n  [subscriptionKeys.fixedPrice]: z.object({\n    value: z.string().describe('The fixed price for the subscription.'),\n    sequence: z.number().describe('The order sequence for the billing cycles'),\n  }).optional().describe('The fixed price for a billing cycle.'),\n  [subscriptionKeys.paymentFailureThreshold]: paymentFailureThresholdSchema,\n  [subscriptionKeys.autoBillOutstanding]: autoBillOutstandingSchema,\n  [subscriptionKeys.taxesInclusive]: taxInclusiveSchema,\n  [subscriptionKeys.taxesPercentage]: taxPercentageSchema,\n  [subscriptionKeys.shippingAmount]: z.string().optional().describe('The value of the shipping amount.'),\n  [subscriptionKeys.shippingAddress]: ShippingAddressSchema.optional().describe('The shipping address.'),\n})\n\n// === REFUND PARAMETERS ===\n\nexport const getRefundParameters = (context: Context) => z.object({\n  refund_id: z.string().describe('The ID of the refund to get details for.'),\n});\n\nexport const createRefundParameters = (context: Context) => z.object({\n  capture_id: z.string().describe('The ID of the capture to refund.'),\n  amount: z.object({\n    currency_code: z.string(),\n    value: z.string(),\n  }).optional().describe('The amount to refund. If not specified, the full captured amount is refunded.'),\n  invoice_id: z.string().optional().describe('The invoice ID that is used to track this payment.'),\n  note_to_payer: z.string().optional().describe('A note to the payer.'),\n});\n\n","import { z } from 'zod';\n\nimport {\n  createInvoicePrompt,\n  listInvoicesPrompt,\n  getInvoicePrompt,\n  sendInvoicePrompt,\n  sendInvoiceReminderPrompt,\n  cancelSentInvoicePrompt,\n  createShipmentPrompt,\n  getShipmentTrackingPrompt,\n  generateInvoiceQrCodePrompt,\n  createOrderPrompt,\n  getOrderPrompt,\n  getDisputePrompt,\n  listDisputesPrompt,\n  acceptDisputeClaimPrompt,\n  captureOrderPrompt,\n  listTransactionsPrompt,\n  createProductPrompt,\n  listProductsPrompt,\n  showProductDetailsPrompt,\n  updateProductPrompt,\n  createSubscriptionPlanPrompt,\n  listSubscriptionPlansPrompt,\n  showSubscriptionPlanDetailsPrompt,\n  createSubscriptionPrompt,\n  showSubscriptionDetailsPrompt,\n  cancelSubscriptionPrompt,\n  updateSubscriptionPrompt,\n  getRefundPrompt,\n  createRefundPrompt,\n} from './prompts';\n\nimport {\n  createInvoiceParameters,\n  listInvoicesParameters,\n  getInvoicParameters,\n  sendInvoiceParameters,\n  sendInvoiceReminderParameters,\n  cancelSentInvoiceParameters,\n  createShipmentParameters,\n  getShipmentTrackingParameters,\n  generateInvoiceQrCodeParameters,\n  createOrderParameters,\n  getOrderParameters,\n  getDisputeParameters,\n  listDisputesParameters,\n  acceptDisputeClaimParameters,\n  captureOrderParameters,\n  listTransactionsParameters,\n  createProductParameters,\n  listProductsParameters,\n  updateProductParameters,\n  showProductDetailsParameters,\n  createSubscriptionPlanParameters,\n  listSubscriptionPlansParameters,\n  showSubscriptionPlanDetailsParameters,\n  createSubscriptionParameters,\n  showSubscriptionDetailsParameters,\n  cancelSubscriptionParameters,\n  updateSubscriptionParameters,\n  getRefundParameters,\n  createRefundParameters,\n} from './parameters';\n\nimport type { Context } from './configuration';\n\nexport type Tool = {\n  method: string;\n  name: string;\n  description: string;\n  parameters: z.ZodObject<any, any, any, any>;\n  actions: {\n    [key: string]: {\n      [action: string]: boolean;\n    };\n  };\n};\n\nconst tools = (context: Context): Tool[] => [\n  {\n    method: 'create_invoice',\n    name: 'Create Invoice',\n    description: createInvoicePrompt(context),\n    parameters: createInvoiceParameters(context),\n    actions: {\n      invoices: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'list_invoices',\n    name: 'List Invoices',\n    description: listInvoicesPrompt(context),\n    parameters: listInvoicesParameters(context),\n    actions: {\n      invoices: {\n        list: true,\n      },\n    },\n  },\n  {\n    method: 'get_invoice',\n    name: 'Get Invoice',\n    description: getInvoicePrompt(context),\n    parameters: getInvoicParameters(context),\n    actions: {\n      invoices: {\n        get: true,\n      },\n    },\n  },\n  {\n    method: 'send_invoice',\n    name: 'Send Invoice',\n    description: sendInvoicePrompt(context),\n    parameters: sendInvoiceParameters(context),\n    actions: {\n      invoices: {\n        send: true,\n      },\n    },\n  },\n  {\n    method: 'send_invoice_reminder',\n    name: 'Send Invoice Reminder',\n    description: sendInvoiceReminderPrompt(context),\n    parameters: sendInvoiceReminderParameters(context),\n    actions: {\n      invoices: {\n        sendReminder: true,\n      },\n    },\n  },\n  {\n    method: 'cancel_sent_invoice',\n    name: 'Cancel Sent Invoice',\n    description: cancelSentInvoicePrompt(context),\n    parameters: cancelSentInvoiceParameters(context),\n    actions: {\n      invoices: {\n        cancel: true,\n      },\n    },\n  },\n  {\n    method: 'generate_invoice_qr_code',\n    name: 'Generate Invoice QR Code',\n    description: generateInvoiceQrCodePrompt(context),\n    parameters: generateInvoiceQrCodeParameters(context),\n    actions: {\n      invoices: {\n        generateQRC: true,\n      },\n    },\n  },\n  {\n    method: 'create_product',\n    name: 'Create Product',\n    description: createProductPrompt(context),\n    parameters: createProductParameters(context),\n    actions: {\n      products: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'list_products',\n    name: 'List Products',\n    description: listProductsPrompt(context),\n    parameters: listProductsParameters(context),\n    actions: {\n      products: {\n        list: true,\n      },\n    },\n  },\n  {\n    method: 'update_product',\n    name: 'Update Product',\n    description: updateProductPrompt(context),\n    parameters: updateProductParameters(context),\n    actions: {\n      products: {\n        update: true,\n      },\n    },\n  },\n  {\n    method: 'show_product_details',\n    name: 'Show Products Details',\n    description: showProductDetailsPrompt(context),\n    parameters: showProductDetailsParameters(context),\n    actions: {\n      products: {\n        show: true,\n      },\n    },\n  },\n  {\n    method: 'create_subscription_plan',\n    name: 'Create Subscription Plan',\n    description: createSubscriptionPlanPrompt(context),\n    parameters: createSubscriptionPlanParameters(context),\n    actions: {\n      subscriptionPlans: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'list_subscription_plans',\n    name: 'List Subscription Plans',\n    description: listSubscriptionPlansPrompt(context),\n    parameters: listSubscriptionPlansParameters(context),\n    actions: {\n      subscriptionPlans: {\n        list: true,\n      },\n    },\n  },\n  {\n    method: 'show_subscription_plan_details',\n    name: 'Show Subscription Plan Details',\n    description: showSubscriptionPlanDetailsPrompt(context),\n    parameters: showSubscriptionPlanDetailsParameters(context),\n    actions: {\n      subscriptionPlans: {\n        show: true,\n      },\n    },\n  },\n  {\n    method: 'create_subscription',\n    name: 'Create Subscription',\n    description: createSubscriptionPrompt(context),\n    parameters: createSubscriptionParameters(context),\n    actions: {\n      subscriptions: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'show_subscription_details',\n    name: 'Show Subscription Details',\n    description: showSubscriptionDetailsPrompt(context),\n    parameters: showSubscriptionDetailsParameters(context),\n    actions: {\n      subscriptions: {\n        show: true,\n      },\n    },\n  },\n  {\n    method: 'cancel_subscription',\n    name: 'Cancel Subscription',\n    description: cancelSubscriptionPrompt(context),\n    parameters: cancelSubscriptionParameters(context),\n    actions: {\n      subscriptions: {\n        cancel: true,\n      },\n    },\n  },\n  {\n    method: 'update_subscription',\n    name: 'Update Subscription',\n    description: updateSubscriptionPrompt(context),\n    parameters: updateSubscriptionParameters(context),\n    actions: {\n      subscriptions: {\n        update: true,\n      },\n    },\n  },\n  {\n    method: 'create_shipment_tracking',\n    name: 'Create shipment',\n    description: createShipmentPrompt(context),\n    parameters: createShipmentParameters(context),\n    actions: {\n      shipment: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'get_shipment_tracking',\n    name: 'Get Shipment Tracking',\n    description: getShipmentTrackingPrompt(context),\n    parameters: getShipmentTrackingParameters(context),\n    actions: {\n      shipment: {\n        get: true,\n      },\n    },\n  },\n  {\n    method: 'create_order',\n    name: 'Create Order',\n    description: createOrderPrompt(context),\n    parameters: createOrderParameters(context),\n    actions: {\n      orders: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'get_order',\n    name: 'Get Order',\n    description: getOrderPrompt(context),\n    parameters: getOrderParameters(context),\n    actions: {\n      orders: {\n        get: true,\n      },\n    },\n  },\n  {\n    method: 'pay_order',\n    name: 'Process payment for an authorized order',\n    description: captureOrderPrompt(context),\n    parameters: captureOrderParameters(context),\n    actions: {\n      orders: {\n        capture: true,\n      },\n    },\n  },\n  {\n    method: 'list_disputes',\n    name: 'List Disputes',\n    description: listDisputesPrompt(context),\n    parameters: listDisputesParameters(context),\n    actions: {\n      disputes: {\n        list: true,\n      },\n    },\n  },\n  {\n    method: 'get_dispute',\n    name: 'Get Dispute',\n    description: getDisputePrompt(context),\n    parameters: getDisputeParameters(context),\n    actions: {\n      disputes: {\n        get: true,\n      },\n    },\n  },\n  {\n    method: 'accept_dispute_claim',\n    name: 'Accept dispute claim',\n    description: acceptDisputeClaimPrompt(context),\n    parameters: acceptDisputeClaimParameters(context),\n    actions: {\n      disputes: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'list_transactions',\n    name: 'List Transactions',\n    description: listTransactionsPrompt(context),\n    parameters: listTransactionsParameters(context),\n    actions: {\n      transactions: {\n        list: true,\n      },\n    },\n  },\n    {\n    method: 'create_refund',\n    name: 'Create Refund',\n    description: createRefundPrompt(context),\n    parameters: createRefundParameters(context),\n    actions: {\n      payments: {\n        createRefund: true,\n      },\n    },\n  },\n  {\n    method: 'get_refund',\n    name: 'Get Refund',\n    description: getRefundPrompt(context),\n    parameters: getRefundParameters(context),\n    actions: {\n      payments: {\n        getRefunds: true,\n      },\n    },\n  }\n];\nconst allActions = tools({}).reduce((acc, tool) => {\n  Object.keys(tool.actions).forEach(product => {\n    acc[product] = { ...acc[product], ...tool.actions[product] };\n  });\n  return acc;\n}, {} as { [key: string]: { [key: string]: boolean } });\n\nexport const ALL_TOOLS_ENABLED = allActions;\n\nexport default tools;\n","\n\nimport { Configuration, isToolAllowed } from '../shared/configuration';\nimport PayPalAPI from '../shared/api';\nimport tools,  {Tool} from '../shared/tools';\n\nconst SOURCE = 'Remote MCP';\n\nclass PayPalMCPToolkit {\n  private _paypal: PayPalAPI;\n  private readonly filteredTools: Tool[] = [];\n\n  constructor({\n    accessToken,\n    configuration,\n  }: {\n    accessToken: string;\n    configuration: Configuration;\n  }) {\n \n    this._paypal = new PayPalAPI(accessToken, { ...configuration.context, source: SOURCE });\n    const context = configuration.context || {};\n    this.filteredTools = tools(context).filter((tool) =>\n      isToolAllowed(tool, configuration)\n    );\n  }\n\n  public getTools(): Tool[] {\n    return this.filteredTools;\n  }\n\n  public getPaypalAPIService(): PayPalAPI {\n    return this._paypal;\n  }\n}\n\nexport default PayPalMCPToolkit;\n\n"],"mappings":"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","names":["debug","key","import_debug","logger","debug","axios","axios","logger","axios","import_axios","import_debug","logger","debug","axios","os","SOURCE"]}