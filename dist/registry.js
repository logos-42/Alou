"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.addRegistry = addRegistry;
exports.searchRegistry = searchRegistry;
const fs = __importStar(require("fs/promises"));
const path = __importStar(require("path"));
const llm_js_1 = require("./llm.js");
const registryPath = path.join(process.cwd(), 'mcp-services', 'registry.json');
async function readRegistry() {
    try {
        const raw = await fs.readFile(registryPath, 'utf-8');
        return JSON.parse(raw);
    }
    catch {
        return [];
    }
}
async function addRegistry(record) {
    const list = await readRegistry();
    // ÂéªÈáç
    if (!list.find(r => r.id === record.id)) {
        list.push(record);
        await fs.mkdir(path.dirname(registryPath), { recursive: true });
        await fs.writeFile(registryPath, JSON.stringify(list, null, 2));
    }
}
async function searchRegistry(queryWords) {
    const list = await readRegistry();
    // Â¶ÇÊûúÊ≤°ÊúâÊúçÂä°ÔºåÁõ¥Êé•ËøîÂõû
    if (list.length === 0) {
        console.log('üì≠ Registry ‰∏∫Á©∫ÔºåË∑≥ËøáÊú¨Âú∞ÊêúÁ¥¢');
        return null;
    }
    console.log('üîç Registry ÊêúÁ¥¢ÂÖ≥ÈîÆËØç:', queryWords);
    try {
        // ‰ΩøÁî® AI ËøõË°åÊô∫ËÉΩÂåπÈÖç
        const userQuery = queryWords.join(' ');
        const servicesInfo = list.map(rec => `ID: ${rec.id}\nÁ±ªÂûã: ${rec.service_type}\nÊ†áÈ¢ò: ${rec.title}\nÊ†áÁ≠æ: ${rec.tags.join(', ')}`).join('\n\n');
        const prompt = `
ÂàÜÊûêÁî®Êà∑ÈúÄÊ±ÇÂπ∂ÊâæÂá∫ÊúÄÂåπÈÖçÁöÑ MCP ÊúçÂä°„ÄÇ

Áî®Êà∑ÈúÄÊ±Ç: ${userQuery}

ÂèØÁî®ÊúçÂä°ÂàóË°®:
${servicesInfo}

ËØ∑ÂàÜÊûêÁî®Êà∑ÈúÄÊ±Ç‰∏éÊØè‰∏™ÊúçÂä°ÁöÑÂåπÈÖçÁ®ãÂ∫¶ÔºåËøîÂõûÊúÄ‰Ω≥ÂåπÈÖçÁöÑÊúçÂä°„ÄÇ

Ë¶ÅÊ±Ç:
1. ÁêÜËß£Áî®Êà∑ÈúÄÊ±ÇÁöÑËØ≠‰πâÂê´‰πâ
2. ÂàÜÊûêÊØè‰∏™ÊúçÂä°ÁöÑÂäüËÉΩÂíåÈÄÇÁî®Âú∫ÊôØ
3. ËÆ°ÁÆóÂåπÈÖçÂ∫¶ÂàÜÊï∞ (0-100)
4. Â¶ÇÊûúÊúÄÈ´òÂàÜÊï∞ >= 60ÔºåËøîÂõûËØ•ÊúçÂä°IDÔºõÂê¶ÂàôËøîÂõû null

ËØ∑Áõ¥Êé•ËøîÂõûJSONÊ†ºÂºèÔºå‰∏çË¶ÅÂåÖÂê´ÂÖ∂‰ªñÂÜÖÂÆπÔºö
{
  "best_match": "ÊúçÂä°IDÊàñnull",
  "score": ÂåπÈÖçÂàÜÊï∞(0-100),
  "reason": "ÂåπÈÖçÂéüÂõ†"
}
`;
        console.log('ü§ñ ‰ΩøÁî® AI ÂàÜÊûêÊúçÂä°ÂåπÈÖçÂ∫¶...');
        const result = await (0, llm_js_1.askLLM)(prompt);
        // Ëß£Êûê AI ÂìçÂ∫î
        const cleanResult = result.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
        const jsonMatch = cleanResult.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
            const analysis = JSON.parse(jsonMatch[0]);
            console.log('üß† AI ÂàÜÊûêÁªìÊûú:', analysis);
            if (analysis.best_match && analysis.score >= 60) {
                const matchedService = list.find(rec => rec.id === analysis.best_match);
                if (matchedService) {
                    console.log(`üéØ Registry AI ÂëΩ‰∏≠: ${matchedService.title} (ÂàÜÊï∞: ${analysis.score})`);
                    console.log(`üí° ÂåπÈÖçÂéüÂõ†: ${analysis.reason}`);
                    return matchedService;
                }
            }
        }
        console.log('‚ùå Registry AI Êú™ÊâæÂà∞ÂåπÈÖçÁöÑÊúçÂä°');
        return null;
    }
    catch (error) {
        console.error('‚ö†Ô∏è Registry AI ÂåπÈÖçÂ§±Ë¥•Ôºå‰ΩøÁî®Â§áÁî®ÊñπÊ°à:', error);
        // Â§áÁî®ÊñπÊ°àÔºöÁÆÄÂçïÁöÑÂÖ≥ÈîÆËØçÂåπÈÖç
        let best = null;
        let bestScore = 0;
        for (const rec of list) {
            const text = `${rec.tags.join(' ')} ${rec.service_type} ${rec.title} ${rec.id}`.toLowerCase();
            let score = 0;
            for (const word of queryWords) {
                const lowerWord = word.toLowerCase();
                if (text.includes(lowerWord)) {
                    score += 1;
                }
            }
            if (score > bestScore) {
                best = rec;
                bestScore = score;
            }
        }
        if (bestScore > 0) {
            console.log(`üéØ Registry Â§áÁî®ÂåπÈÖç: ${best.title} (ÂàÜÊï∞: ${bestScore})`);
            return best;
        }
        return null;
    }
}
//# sourceMappingURL=registry.js.map